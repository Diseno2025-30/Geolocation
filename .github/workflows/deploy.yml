name: Deploy Flask App with Branch Testing

on:
  push:
    branches:
      - main
      - '*-branch' # Triggers for any branch like oliver-branch, alan-branch, etc.
    paths:
      # Se activa si hay cambios en el proyecto o el propio workflow
      - 'Proyecto_1_Diseno/**'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Maps instances to their specific names and branches
        include:
          - instance: 1
            name: oliver
            branch: oliver-branch
          - instance: 2
            name: alan
            branch: alan-branch
          - instance: 3
            name: sebastian
            branch: sebastian-branch
          - instance: 4
            name: hernando
            branch: hernando-branch

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Determine Deployment Type
      id: deployment
      run: |
        BRANCH_NAME="${{ github.ref_name }}"
        PERSON_BRANCH="${{ matrix.branch }}"
        
        echo "##[info]Current Branch: $BRANCH_NAME"
        echo "##[info]Expected Person Branch for this instance: $PERSON_BRANCH"
        
        if [ "$BRANCH_NAME" = "main" ]; then
          echo "DEPLOY_MAIN=true" >> $GITHUB_OUTPUT
          echo "DEPLOY_TEST=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Action: Deploy MAIN to instance ${{ matrix.instance }}."
        elif [ "$BRANCH_NAME" = "$PERSON_BRANCH" ]; then
          # A push was made to a personal branch, and it matches this instance's assigned branch
          echo "DEPLOY_MAIN=false" >> $GITHUB_OUTPUT
          echo "DEPLOY_TEST=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Action: Deploy TEST for ${{ matrix.name }} on instance ${{ matrix.instance }}."
        else
          # This job is for a different instance, not the one whose branch was pushed
          echo "DEPLOY_MAIN=false" >> $GITHUB_OUTPUT
          echo "DEPLOY_TEST=false" >> $GITHUB_OUTPUT
          echo "‚è≠Ô∏è Action: Skipping deployment for instance ${{ matrix.instance }}. Push was for a different branch."
        fi

    - name: Deploy to EC2 Instance ${{ matrix.instance }}
      # This step only runs if one of the deployment flags is true
      if: steps.deployment.outputs.DEPLOY_MAIN == 'true' || steps.deployment.outputs.DEPLOY_TEST == 'true'
      env:
        HOST: ${{ secrets[format('EC2_HOST_{0}', matrix.instance)] }}
        USER: ${{ secrets[format('EC2_USER_{0}', matrix.instance)] }}
        KEY: ${{ secrets[format('EC2_SSH_KEY_{0}', matrix.instance)] }}
        ENV_FILE: ${{ secrets[format('ENV_FILE_{0}', matrix.instance)] }}
        DOMAIN_BASE: tumaquinaya.com
        DEPLOY_MAIN: ${{ steps.deployment.outputs.DEPLOY_MAIN }}
        DEPLOY_TEST: ${{ steps.deployment.outputs.DEPLOY_TEST }}
        BRANCH_NAME: ${{ github.ref_name }}
        
      run: |
        echo "üöÄ Iniciando despliegue en la instancia ${{ matrix.instance }} (${{ matrix.name }})..."
        
        # Crear archivos temporales
        echo "$KEY" > deploy_key
        chmod 600 deploy_key
        
        # Crear archivo .env temporal con expansi√≥n de variable
        echo "$ENV_FILE" > temp_env_file
        
        NAME_VALUE="${{ matrix.name }}"
        FULL_DOMAIN="${NAME_VALUE}.${DOMAIN_BASE}"
        
        echo "üìã Configuraci√≥n detectada:"
        echo "   - Subdominio: ${NAME_VALUE}"
        echo "   - Dominio: ${FULL_DOMAIN}"
        echo "   - Deploy Main: ${DEPLOY_MAIN}"
        echo "   - Deploy Test: ${DEPLOY_TEST}"
        echo "   - Branch: ${BRANCH_NAME}"
        
        # Script de despliegue remoto
        cat > deploy_remote.sh << 'DEPLOYEOF'
        #!/bin/bash
        set -e

        # Par√°metros
        SUBDOMAIN="${1}"
        DOMAIN_BASE="${2}"
        DEPLOY_MAIN="${3}"
        DEPLOY_TEST="${4}"
        BRANCH_NAME="${5}"
        
        echo "--- üîß Configuraci√≥n Remota ---"
        echo "Subdominio: ${SUBDOMAIN}"
        echo "Deploy Main: ${DEPLOY_MAIN}"
        echo "Deploy Test: ${DEPLOY_TEST}"
        echo "Branch: ${BRANCH_NAME}"
        
        BASE_DIR="/opt/location-tracker"
        sudo mkdir -p ${BASE_DIR}
        sudo chown $USER:$USER ${BASE_DIR}
        
        # --- Funci√≥n para configurar una App ---
        setup_flask_app() {
            local APP_DIR=$1
            local APP_NAME=$2
            local PORT=$3
            local REPO_URL="https://github.com/Diseno2025-30/Geolocation.git"
            
            echo "--- ‚öôÔ∏è  Configurando App: ${APP_NAME} en puerto ${PORT} ---"
            
            # Clonar o actualizar repo
            if [ ! -d "${APP_DIR}" ]; then
                git clone ${REPO_URL} ${APP_DIR}
            fi
            
            cd ${APP_DIR}
            git fetch origin
            git checkout ${BRANCH_NAME}
            git reset --hard origin/${BRANCH_NAME}
            
            cd Proyecto_1_Diseno
            PROJECT_PATH=$(pwd)
            
            # Copiar .env
            cp /tmp/.env .
            
            # Entorno Python
            if [ ! -d "venv" ]; then
                python3 -m venv venv
            fi
            source venv/bin/activate
            pip install --upgrade pip -q
            pip install flask psycopg2-binary python-dotenv -q
            
            # Script de inicio
            cat > start_app.sh << STARTSCRIPT
        #!/bin/bash
        source venv/bin/activate
        export FLASK_APP=udp_flask_server.py
        export FLASK_ENV=production
        python udp_flask_server.py --port=${PORT}
        STARTSCRIPT
            chmod +x start_app.sh
            
            # Gestionar con PM2
            if pm2 list | grep -q "${APP_NAME}"; then
                echo "üîÑ Recargando ${APP_NAME}..."
                pm2 reload ${APP_NAME} --update-env
            else
                echo "üÜï Iniciando ${APP_NAME}..."
                pm2 start start_app.sh --name ${APP_NAME}
            fi
        }
        
        # --- L√≥gica de Despliegue ---
        if [ "${DEPLOY_MAIN}" = "true" ]; then
            setup_flask_app "${BASE_DIR}/main" "flask-app-${SUBDOMAIN}" 5000
        fi
        
        if [ "${DEPLOY_TEST}" = "true" ]; then
            setup_flask_app "${BASE_DIR}/test-${SUBDOMAIN}" "flask-test-${SUBDOMAIN}" 5001
        fi
        
        # --- Configurar Nginx ---
        echo "--- üåê Configurando Nginx ---"
        FULL_DOMAIN="${SUBDOMAIN}.${DOMAIN_BASE}"
        
        cat > /tmp/nginx-config << NGINXCONF
        server {
            listen 80;
            server_name ${FULL_DOMAIN};

            # Ruta principal (PRODUCCI√ìN)
            location / {
                proxy_pass http://127.0.0.1:5000;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
            }

            # Ruta de pruebas (TEST)
            location /test {
                proxy_pass http://127.0.0.1:5001;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                
                # Manejar error si el servidor de test no est√° activo
                proxy_intercept_errors on;
                error_page 502 = @test_unavailable;
            }
            
            location @test_unavailable {
                default_type text/html;
                return 200 '<html><head><title>Test Not Available</title></head><body><h1>Test Environment is Offline</h1><p>No test deployment is active for this user. Please <a href="/">return to the main site</a>.</p></body></html>';
            }
        }
        NGINXCONF

        sudo mv /tmp/nginx-config /etc/nginx/sites-available/${SUBDOMAIN}
        sudo ln -sf /etc/nginx/sites-available/${SUBDOMAIN} /etc/nginx/sites-enabled/
        sudo rm -f /etc/nginx/sites-enabled/default
        
        if sudo nginx -t; then
            sudo systemctl reload nginx
            echo "‚úÖ Nginx configurado."
        else
            echo "‚ùå Error en configuraci√≥n de Nginx."
            exit 1
        fi
        
        pm2 save
        echo "--- ‚úÖ Despliegue Finalizado ---"
        pm2 list
        
        DEPLOYEOF
        
        # Transferir y ejecutar script
        scp -o StrictHostKeyChecking=no -i deploy_key temp_env_file ${USER}@${HOST}:/tmp/.env
        scp -o StrictHostKeyChecking=no -i deploy_key deploy_remote.sh ${USER}@${HOST}:/tmp/deploy_remote.sh
        
        ssh -o StrictHostKeyChecking=no -i deploy_key ${USER}@${HOST} \
          "chmod +x /tmp/deploy_remote.sh && \
           /tmp/deploy_remote.sh '${NAME_VALUE}' '${DOMAIN_BASE}' '${DEPLOY_MAIN}' '${DEPLOY_TEST}' '${BRANCH_NAME}'"
           
        # Limpieza
        rm -f deploy_key temp_env_file deploy_remote.sh
        
        echo "‚úÖ Despliegue completado para instancia ${{ matrix.instance }}"