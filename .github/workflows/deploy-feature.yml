name: Deploy Feature Branch to Test

on:
  push:
    branches:
      - Oliver-branch
      - Hernando-branch
      - Alan-branch
      - Sebastian-branch
  workflow_dispatch:
    inputs:
      branch:
        description: "Feature branch to deploy"
        required: true
        type: choice
        options:
          - Oliver-branch
          - Hernando-branch
          - Alan-branch
          - Sebastian-branch

jobs:
  deploy-feature:
    runs-on: ubuntu-latest
    
    steps:
    - name: Determine target instance
      id: determine-instance
      run: |
        # Determinar la rama actual
        if [ "${{ github.event_name }}" = "push" ]; then
          BRANCH_NAME="${{ github.ref_name }}"
        else
          BRANCH_NAME="${{ github.event.inputs.branch }}"
        fi
        
        echo "Branch to deploy: ${BRANCH_NAME}"
        
        # Mapear rama a instancia
        case "${BRANCH_NAME}" in
          "Oliver-branch")
            INSTANCE_NUM=1
            PERSON_NAME="Oliver"
            ;;
          "Hernando-branch")
            INSTANCE_NUM=2
            PERSON_NAME="Hernando"
            ;;
          "Alan-branch")
            INSTANCE_NUM=3
            PERSON_NAME="Alan"
            ;;
          "Sebastian-branch")
            INSTANCE_NUM=4
            PERSON_NAME="Sebastian"
            ;;
          *)
            echo "‚ùå Rama no reconocida: ${BRANCH_NAME}"
            exit 1
            ;;
        esac
        
        echo "TARGET_INSTANCE=${INSTANCE_NUM}" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        echo "PERSON_NAME=${PERSON_NAME}" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Desplegando ${BRANCH_NAME} a instancia ${INSTANCE_NUM} (${PERSON_NAME})"

    - name: Checkout branch
      uses: actions/checkout@v3
      with:
        ref: ${{ steps.determine-instance.outputs.BRANCH_NAME }}

    - name: Deploy to assigned instance
      env:
        HOST: ${{ secrets[format('EC2_HOST_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
        USER: ${{ secrets[format('EC2_USER_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
        KEY: ${{ secrets[format('EC2_SSH_KEY_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
        ENV_FILE: ${{ secrets[format('ENV_FILE_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
        DOMAIN_BASE: tumaquinaya.com
        BRANCH_NAME: ${{ steps.determine-instance.outputs.BRANCH_NAME }}
        PERSON_NAME: ${{ steps.determine-instance.outputs.PERSON_NAME }}
        INSTANCE_NUM: ${{ steps.determine-instance.outputs.TARGET_INSTANCE }}
      run: |
        echo "üöÄ Desplegando ${BRANCH_NAME} en instancia ${INSTANCE_NUM} (${PERSON_NAME}.${DOMAIN_BASE})"
        
        # Crear archivo de llave SSH
        echo "$KEY" > deploy_key
        chmod 600 deploy_key
        
        # Crear archivo .env temporal
        echo "$ENV_FILE" > temp_env_file
        
        # Verificar que el NAME coincida con la persona asignada
        NAME_VALUE=$(grep "^NAME=" temp_env_file | cut -d'=' -f2 | tr -d '"' | tr -d "'" | xargs)
        NAME_LOWER=$(echo "$NAME_VALUE" | tr '[:upper:]' '[:lower:]')
        PERSON_LOWER=$(echo "$PERSON_NAME" | tr '[:upper:]' '[:lower:]')
        
        if [ "${NAME_LOWER}" != "${PERSON_LOWER}" ]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El NAME en .env (${NAME_VALUE}) no coincide con la persona asignada (${PERSON_NAME})"
            echo "   Esto puede causar inconsistencias. Verificar configuraci√≥n."
        fi
        
        FULL_DOMAIN="${NAME_LOWER}.${DOMAIN_BASE}"
        
        echo "üìã Configuraci√≥n:"
        echo "   - Rama: ${BRANCH_NAME}"
        echo "   - Persona: ${PERSON_NAME}"
        echo "   - Instancia: ${INSTANCE_NUM}"
        echo "   - Dominio: ${FULL_DOMAIN}"
        echo "   - URL de test: https://${FULL_DOMAIN}/test"
        
        # ========== SCRIPT OSRM CON OVERPASS API + ID 1315209 ==========
        cat > setup_osrm.sh << 'OSRMEOF'
        #!/bin/bash
        set -e
        
        echo "üó∫Ô∏è ========================================="
        echo "üó∫Ô∏è CONFIGURANDO OSRM - DEPARTAMENTO ATL√ÅNTICO"
        echo "üó∫Ô∏è ========================================="
        
        # Verificar si OSRM ya est√° instalado y corriendo
        if docker ps 2>/dev/null | grep -q osrm-backend; then
          echo "‚úÖ OSRM ya est√° corriendo correctamente"
          docker ps | grep osrm-backend
          echo ""
          echo "üß™ Probando conectividad OSRM..."
          if curl -s -f http://localhost:5001/nearest/v1/driving/-74.8,11.0 > /dev/null 2>&1; then
            echo "‚úÖ OSRM responde correctamente"
          else
            echo "‚ö†Ô∏è OSRM no responde, reiniciando..."
            docker restart osrm-backend
            sleep 5
          fi
          exit 0
        fi
        
        echo "üì¶ Instalando dependencias..."
        
        # Instalar Docker si no est√° instalado
        if ! command -v docker &> /dev/null; then
          echo "üê≥ Instalando Docker..."
          sudo apt-get update -qq
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          echo "‚úÖ Docker instalado"
        else
          echo "‚úÖ Docker ya est√° instalado"
        fi
        
        # Instalar osmium-tool para convertir formatos
        if ! command -v osmium &> /dev/null; then
          echo "üîß Instalando osmium-tool..."
          sudo apt-get update -qq
          sudo apt-get install -y osmium-tool
          echo "‚úÖ osmium-tool instalado"
        else
          echo "‚úÖ osmium-tool ya est√° instalado"
        fi
        
        # ========== PERMISOS DE DOCKER ==========
        echo "üîß Configurando permisos de Docker..."
        
        if ! groups $USER | grep -q docker; then
          echo "   Agregando usuario '$USER' al grupo docker..."
          sudo usermod -aG docker $USER
        else
          echo "   Usuario '$USER' ya est√° en el grupo docker"
        fi
        
        echo "   Reiniciando Docker daemon..."
        sudo systemctl restart docker
        sleep 2
        
        sudo chmod 666 /var/run/docker.sock
        echo "‚úÖ Permisos de Docker configurados"
        # =========================================
        
        # Crear directorio para datos OSRM
        OSRM_DIR="/opt/osrm-data"
        echo "üìÅ Creando directorio: ${OSRM_DIR}"
        sudo mkdir -p ${OSRM_DIR}
        sudo chown $USER:$USER ${OSRM_DIR}
        cd ${OSRM_DIR}
        
        # Verificar si el mapa del Atl√°ntico ya est√° procesado
        if [ -f "barranquilla.osrm" ]; then
          echo "‚úÖ Mapa del Barranquilla ya procesado, saltando descarga"
        else
          echo ""
          echo "üì• ========================================="
          echo "üì• DESCARGANDO MAPA DE BARRANQUILLA"
          echo "üì• ========================================="
          echo ""
          echo "üó∫Ô∏è M√©todo: Overpass API con Relaci√≥n OSM"
          echo "   ID de Relaci√≥n: 1335179"
          echo "   Nombre: Barranquilla"
          echo "   Fuente: OpenStreetMap"
          echo "   √Årea: ~166 km¬≤"
          echo ""
          
          # Limpiar descargas previas
          rm -f barranquilla.osm barranquilla.osm.pbf
          
          # Descargar usando Overpass API con el ID exacto
          MAX_ATTEMPTS=5
          ATTEMPT=1
          
          echo "üåê Descargando desde Overpass API..."
          echo "   (Esto puede tardar 2-4 minutos)"
          echo ""
          
          # Definir la consulta primero
          OVERPASS_QUERY='[out:xml][timeout:300];area(3600001335179)->.a;(way(area.a)["highway"];node(area.a););out meta;>;out meta;'

          until wget --timeout=300 --tries=1\
            --header="Accept-Encoding: gzip" \
            "https://overpass-api.de/api/interpreter?data=${OVERPASS_QUERY}" \
            -O barranquilla.osm; do
            
            if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
              echo ""
              echo "‚ùå Error: No se pudo descargar desde Overpass API"
              echo ""
              echo "üí° Posibles causas:"
              echo "   - Overpass API est√° sobrecargado"
              echo "   - Timeout de red"
              echo "   - Servidor temporalmente no disponible"
              echo ""
              echo "üîß Soluciones:"
              echo "   1. Reintentar el workflow en unos minutos"
              echo "   2. Verificar estado de Overpass: https://overpass-api.de/api/status"
              echo "   3. Ejecutar manualmente en la EC2:"
              echo "      wget 'https://overpass-api.de/api/interpreter?data=${OVERPASS_QUERY}' -O barranquilla.osm"
              exit 1
            fi
            
            echo ""
            echo "‚ö†Ô∏è Intento $ATTEMPT de $MAX_ATTEMPTS fall√≥"
            echo "   Esperando 30 segundos antes de reintentar..."
            ATTEMPT=$((ATTEMPT+1))
            sleep 30
            rm -f barranquilla.osm
          done

          echo ""
          echo "‚úÖ Descarga completada desde Overpass API"
          FILE_SIZE=$(stat -c%s barranquilla.osm 2>/dev/null || stat -f%z barranquilla.osm)

          if [ $FILE_SIZE -lt 100000 ]; then
            echo "‚ö†Ô∏è Archivo muy peque√±o ($FILE_SIZE bytes), probablemente un error"
            head -20 barranquilla.osm
            exit 1
          fi

          echo "   Archivo: $(ls -lh barranquilla.osm | awk '{print $5}')"

          
          # ========== CONVERTIR DE OSM (XML) A OSM.PBF (BINARIO) ==========
          echo ""
          echo "üîÑ ========================================="
          echo "üîÑ CONVIRTIENDO FORMATO"
          echo "üîÑ ========================================="
          echo ""
          echo "   De: OSM (XML sin comprimir)"
          echo "   A:  OSM.PBF (binario comprimido)"
          echo "   Raz√≥n: OSRM requiere formato PBF"
          echo ""
          
          if ! osmium cat barranquilla.osm -o barranquilla.osm.pbf --overwrite; then
            echo "‚ùå Error convirtiendo formato OSM a PBF"
            exit 1
          fi
          
          echo "‚úÖ Conversi√≥n completada"
          echo "   Archivo OSM original: $(ls -lh barranquilla.osm 2>/dev/null | awk '{print $5}')"
          echo "   Archivo PBF comprimido: $(ls -lh barranquilla.osm.pbf | awk '{print $5}')"
          echo ""
          
          # Limpiar archivo XML grande
          echo "üßπ Limpiando archivo OSM original..."
          rm -f barranquilla.osm
          echo "üíæ Archivo final: $(ls -lh barranquilla.osm.pbf | awk '{print $5}')"
          
          # ========== PROCESAR CON OSRM ==========
          echo ""
          echo "‚öôÔ∏è ========================================="
          echo "‚öôÔ∏è PROCESANDO MAPA CON OSRM"
          echo "‚öôÔ∏è ========================================="
          echo ""
          echo "   Algoritmo: MLD (Multi-Level Dijkstra)"
          echo "   Perfil: Car (autom√≥viles)"
          echo "   Tiempo estimado: 3-5 minutos"
          echo ""
          
          echo "üìç Paso 1/3: Extracci√≥n de datos de rutas..."
          if ! docker run -t -v "${PWD}:/data" ghcr.io/project-osrm/osrm-backend \
            osrm-extract -p /opt/car.lua /data/barranquilla.osm.pbf; then
            echo "‚ùå Error en extracci√≥n OSRM"
            echo "üí° Verifica los logs arriba para m√°s detalles"
            exit 1
          fi
          echo "‚úÖ Extracci√≥n completada"
          
          echo ""
          echo "üóÇÔ∏è Paso 2/3: Particionamiento de grafo..."
          if ! docker run -t -v "${PWD}:/data" ghcr.io/project-osrm/osrm-backend \
            osrm-partition /data/barranquilla.osrm; then
            echo "‚ùå Error en particionamiento OSRM"
            exit 1
          fi
          echo "‚úÖ Particionamiento completado"
          
          echo ""
          echo "üé® Paso 3/3: Personalizaci√≥n de rutas..."
          if ! docker run -t -v "${PWD}:/data" ghcr.io/project-osrm/osrm-backend \
            osrm-customize /data/barranquilla.osrm; then
            echo "‚ùå Error en personalizaci√≥n OSRM"
            exit 1
          fi
          echo "‚úÖ Personalizaci√≥n completada"
          
          echo ""
          echo "‚úÖ Procesamiento OSRM completado exitosamente"
          
          # Limpiar archivo .osm.pbf para ahorrar espacio
          echo ""
          echo "üßπ Limpiando archivos temporales..."
          rm -f barranquilla.osm.pbf
          
          echo ""
          echo "üíæ Espacio utilizado:"
          du -sh ${OSRM_DIR}
          echo ""
          echo "üìÇ Archivos finales:"
          ls -lh ${OSRM_DIR}/ | grep barranquilla
        fi
        
        echo ""
        echo "üöÄ ========================================="
        echo "üöÄ INICIANDO SERVIDOR OSRM"
        echo "üöÄ ========================================="
        
        # Detener contenedor anterior si existe
        docker stop osrm-backend 2>/dev/null || true
        docker rm osrm-backend 2>/dev/null || true
        
        # Iniciar servidor OSRM en puerto 5001
        echo "   Puerto: 5001"
        echo "   Algoritmo: MLD"
        echo "   Auto-reinicio: Habilitado"
        echo ""
        
        docker run -d --name osrm-backend \
          --restart unless-stopped \
          -p 5001:5000 \
          -v "${PWD}:/data" \
          ghcr.io/project-osrm/osrm-backend \
          osrm-routed --algorithm mld /data/barranquilla.osrm
        
        # Esperar a que OSRM est√© listo
        echo "‚è≥ Esperando que OSRM est√© listo..."
        for i in {1..30}; do
          if curl -s -f http://localhost:5001/nearest/v1/driving/-74.8,11.0 > /dev/null 2>&1; then
            echo ""
            echo "‚úÖ OSRM est√° funcionando correctamente"
            break
          fi
          if [ $i -eq 30 ]; then
            echo ""
            echo "‚ùå Timeout esperando OSRM. Ver logs:"
            docker logs osrm-backend --tail 50
            exit 1
          fi
          echo -n "."
          sleep 2
        done
        
        echo ""
        echo "üîß Configurando servicio systemd para auto-inicio..."
        
        # Crear servicio systemd
        sudo tee /etc/systemd/system/osrm.service > /dev/null << SERVICEEOF
        [Unit]
        Description=OSRM Backend Service - Departamento del Atl√°ntico
        After=docker.service
        Requires=docker.service
        
        [Service]
        Type=simple
        User=$USER
        Restart=always
        RestartSec=10
        ExecStartPre=-/usr/bin/docker stop osrm-backend
        ExecStartPre=-/usr/bin/docker rm osrm-backend
        ExecStart=/usr/bin/docker run --rm --name osrm-backend -p 5001:5000 -v ${OSRM_DIR}:/data ghcr.io/project-osrm/osrm-backend osrm-routed --algorithm mld /data/barranquilla.osrm
        ExecStop=/usr/bin/docker stop osrm-backend
        
        [Install]
        WantedBy=multi-user.target
        SERVICEEOF
        
        sudo systemctl daemon-reload
        sudo systemctl enable osrm
        
        echo "‚úÖ Servicio systemd configurado"
        
        # Prueba final
        echo ""
        echo "üß™ ========================================="
        echo "üß™ PRUEBA DE SNAP-TO-ROADS"
        echo "üß™ ========================================="
        echo ""
        
        RESPONSE=$(curl -s http://localhost:5001/nearest/v1/driving/-74.8,11.0)
        if echo "$RESPONSE" | grep -q "Ok"; then
          echo "‚úÖ Snap-to-roads funcionando correctamente"
          echo ""
          echo "üìç Prueba realizada:"
          echo "   Coordenada original: (-74.8, 11.0)"
          echo "   Ubicaci√≥n: Barranquilla centro"
          echo "   Resultado: Ajustada a la calle m√°s cercana"
        else
          echo "‚ö†Ô∏è Respuesta inesperada de OSRM:"
          echo "$RESPONSE"
        fi
        
        echo ""
        echo "========================================="
        echo "‚úÖ INSTALACI√ìN COMPLETADA"
        echo "========================================="
        echo ""
        echo "üìä INFORMACI√ìN DEL SISTEMA:"
        echo "   - URL local: http://localhost:5001"
        echo "   - Directorio: ${OSRM_DIR}"
        echo "   - Mapa: Barranquilla"
        echo "   - Fuente: OpenStreetMap (Relaci√≥n 1335179)"
        echo "   - L√≠mites: Pol√≠ticos oficiales del municipio"
        ...
        echo "üó∫Ô∏è COBERTURA:"
        echo "   ‚úÖ Barranquilla centro y norte"
        echo "   ‚úÖ Barranquilla sur"
        echo "   ‚úÖ Todas las principales avenidas"
        echo "   ‚úÖ Calles y carreteras del municipio"
        echo ""
        echo "üß™ COMANDOS DE PRUEBA:"
        echo "   # Snap-to-roads en Barranquilla"
        echo "   curl 'http://localhost:5001/nearest/v1/driving/-74.8,11.0'"
        echo ""
        echo "   # Ruta de ejemplo (norte a sur de Barranquilla)"
        echo "   curl 'http://localhost:5001/route/v1/driving/-74.8,11.0;-74.79,10.99'"
        echo ""
        echo "   # Match (ajustar trayectoria GPS completa)"
        echo "   curl 'http://localhost:5001/match/v1/driving/-74.8,11.0;-74.79,10.99;-74.78,10.98'"
        echo ""
        echo "üõ†Ô∏è COMANDOS √öTILES:"
        echo "   docker logs -f osrm-backend     # Ver logs en tiempo real"
        echo "   docker restart osrm-backend     # Reiniciar servidor"
        echo "   systemctl status osrm           # Estado del servicio"
        echo "   docker stats osrm-backend       # Monitorear recursos"
        echo ""
        echo "üìö DOCUMENTACI√ìN:"
        echo "   API OSRM: https://project-osrm.org/docs/v5.24.0/api/"
        echo "========================================="
        OSRMEOF
        # ========== FIN SCRIPT OSRM ==========
        
        # Crear script de despliegue remoto
        cat > deploy_test_remote.sh << 'DEPLOYEOF'
        #!/bin/bash
        set -e
        
        # Recibir par√°metros
        SUBDOMAIN="${1}"
        DOMAIN_BASE="${2}"
        INSTANCE_NUM="${3}"
        BRANCH_NAME="${4}"
        PERSON_NAME="${5}"
        
        echo "üîß Configuraci√≥n de despliegue /test:"
        echo "   - Rama: ${BRANCH_NAME}"
        echo "   - Persona: ${PERSON_NAME}"
        echo "   - Subdominio: ${SUBDOMAIN}"
        echo "   - Dominio: ${SUBDOMAIN}.${DOMAIN_BASE}"
        echo "   - Instancia: ${INSTANCE_NUM}"
        
        # Determinar ruta base del proyecto
        if [ -d "/home/ubuntu/Web-server-UDP" ]; then
          BASE_DIR="/home/ubuntu/Web-server-UDP"
        else
          BASE_DIR="/opt/location-tracker"
          sudo mkdir -p ${BASE_DIR}
          sudo chown $USER:$USER ${BASE_DIR}
        fi
        
        # Crear directorio para la versi√≥n test
        TEST_DIR="${BASE_DIR}/test"
        mkdir -p "${TEST_DIR}"
        cd "${TEST_DIR}"
        
        echo "üìÅ Directorio de test: ${TEST_DIR}"
        
        # Actualizar o clonar el c√≥digo de la rama
        if [ -d .git ]; then
          echo "üì¶ Actualizando c√≥digo de la rama ${BRANCH_NAME}..."
          git fetch origin ${BRANCH_NAME}
          git checkout ${BRANCH_NAME}
          git reset --hard origin/${BRANCH_NAME}
          CODE_UPDATED=true
        else
          echo "üì• Clonando repositorio en rama ${BRANCH_NAME}..."
          git clone -b ${BRANCH_NAME} https://github.com/Diseno2025-30/Geolocation.git .
          CODE_UPDATED=true
        fi
        
        # Navegar al directorio del proyecto
        cd Proyecto_1_Diseno
        PROJECT_PATH=$(pwd)
        
        # üîí CORRECCI√ìN DE PERMISOS PARA NGINX
        echo "üîí Configurando permisos para que Nginx (www-data) pueda acceder..."
        chmod o+rx ${BASE_DIR}
        chmod o+rx ${TEST_DIR}
        chmod o+rx ${PROJECT_PATH}
        
        # Si existe carpeta static, configurar permisos recursivamente
        if [ -d "static" ]; then
          find static -type d -exec chmod o+rx {} \;
          find static -type f -exec chmod o+r {} \;
          echo "‚úÖ Permisos configurados para carpeta static"
        fi
        
        # Copiar el archivo .env de producci√≥n y modificarlo
        if [ -f "${BASE_DIR}/Proyecto_1_Diseno/.env" ]; then
          cp "${BASE_DIR}/Proyecto_1_Diseno/.env" .env
        fi
        
        # Agregar configuraci√≥n espec√≠fica para test
        echo "" >> .env
        echo "# Configuraci√≥n de test" >> .env
        echo "TEST_MODE=true" >> .env
        echo "BRANCH_NAME=${BRANCH_NAME}" >> .env
        echo "PERSON_NAME=${PERSON_NAME}" >> .env
        
        FULL_DOMAIN="${SUBDOMAIN}.${DOMAIN_BASE}"
        APP_NAME="flask-test-${SUBDOMAIN}"
        TEST_PORT=6000
        
        echo "üìä Configuraci√≥n:"
        echo "   - APP_NAME: ${APP_NAME}"
        echo "   - Puerto test: ${TEST_PORT}"
        echo "   - Proyecto: ${PROJECT_PATH}"
        
        # Instalar dependencias
        echo "üì¶ Instalando dependencias..."
        sudo apt-get update -qq
        sudo apt-get install -y python3-pip python3-venv nginx
        
        # PM2 si no est√° instalado
        if ! command -v pm2 &> /dev/null; then
          if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          sudo npm install -g pm2
          pm2 startup systemd -u $USER --hp /home/$USER
        fi
        
        # Configurar entorno virtual de Python
        echo "üêç Configurando entorno Python para test..."
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        
        source venv/bin/activate
        pip install --upgrade pip
        pip install flask psycopg2-binary python-dotenv requests
        
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Detener aplicaci√≥n test anterior si existe
        pm2 stop ${APP_NAME} 2>/dev/null || true
        pm2 delete ${APP_NAME} 2>/dev/null || true
        
        # Liberar puerto
        sudo fuser -k ${TEST_PORT}/tcp 2>/dev/null || true
        sleep 2
        
        # Crear script de inicio para test
        cat > start_test_app.sh << STARTSCRIPT
        #!/bin/bash
        cd "\$(dirname "\$0")"
        source venv/bin/activate
        export FLASK_APP=udp_flask_server.py
        export FLASK_ENV=development
        python udp_flask_server.py --port ${TEST_PORT}
        STARTSCRIPT
        chmod +x start_test_app.sh
        
        # Actualizar configuraci√≥n de Nginx para agregar /test
        echo "üåê Configurando Nginx para /test..."
        
        NGINX_CONF="/etc/nginx/sites-available/location-tracker"
        
        # Eliminar configuraciones de test anteriores
        sudo sed -i '/# ===== INICIO RUTAS TEST/,/# ===== FIN RUTAS TEST/d' ${NGINX_CONF}
        
        # Crear archivo temporal con las rutas de test
        cat > /tmp/nginx-test-inject.conf << NGINXTEST
        
        # ===== INICIO RUTAS TEST =====
        # Rama: ${BRANCH_NAME} - Persona: ${PERSON_NAME}
        # Actualizado: $(date)
        
        location = /test {
            return 301 /test/;
        }
        
        location /test/static/ {
            alias ${PROJECT_PATH}/static/;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
        
        location /test/ {
            proxy_pass http://localhost:${TEST_PORT}/;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            proxy_set_header X-Script-Name /test;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off;
        }
        
        location ~ ^/test/(coordenadas|database|version|health)$ {
            proxy_pass http://localhost:${TEST_PORT}/\$1;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
        
        # ===== FIN RUTAS TEST =====
        
        NGINXTEST
        
        # Insertar las rutas de test antes de la ubicaci√≥n principal
        sudo awk '
        /location \/ \{/ {
            while ((getline line < "/tmp/nginx-test-inject.conf") > 0)
                print line
            close("/tmp/nginx-test-inject.conf")
        }
        { print }
        ' ${NGINX_CONF} > /tmp/nginx-new.conf
        
        sudo mv /tmp/nginx-new.conf ${NGINX_CONF}
        rm -f /tmp/nginx-test-inject.conf
        
        # Verificar y recargar Nginx
        if sudo nginx -t; then
          sudo systemctl reload nginx
          echo "‚úÖ Nginx configurado para /test"
        else
          echo "‚ùå Error en configuraci√≥n de Nginx"
          sudo nginx -t
          exit 1
        fi
        
        # Iniciar aplicaci√≥n con PM2
        echo "üöÄ Iniciando aplicaci√≥n de test..."
        pm2 start start_test_app.sh \
          --name ${APP_NAME} \
          --interpreter bash \
          --cwd ${PROJECT_PATH} \
          --log-date-format "YYYY-MM-DD HH:mm:ss"
        
        pm2 save
        
        # Esperar y verificar
        echo "‚è≥ Esperando inicio de la aplicaci√≥n..."
        sleep 5
        
        # Verificaci√≥n
        echo "üìä Estado de la aplicaci√≥n:"
        pm2 status ${APP_NAME}
        
        # Test de conectividad
        echo "üß™ Probando aplicaci√≥n..."
        if curl -s -f http://localhost:${TEST_PORT}/ > /dev/null 2>&1; then
          echo "‚úÖ Aplicaci√≥n respondiendo en puerto ${TEST_PORT}"
        else
          echo "‚ö†Ô∏è La aplicaci√≥n no responde"
          pm2 logs ${APP_NAME} --lines 20 --nostream
        fi
        
        # Resumen final
        echo ""
        echo "========================================="
        echo "üéâ AMBIENTE DE TEST DESPLEGADO"
        echo "========================================="
        echo ""
        echo "üìä INFORMACI√ìN:"
        echo "   - Persona: ${PERSON_NAME}"
        echo "   - Rama: ${BRANCH_NAME}"
        echo "   - Instancia EC2: ${INSTANCE_NUM}"
        echo "   - Aplicaci√≥n PM2: ${APP_NAME}"
        echo "   - Puerto interno: ${TEST_PORT}"
        echo "   - OSRM: http://localhost:5001 (Atl√°ntico)"
        echo ""
        echo "üîó URLS:"
        echo "   - Producci√≥n (main): https://${FULL_DOMAIN}/"
        echo "   - Test (${BRANCH_NAME}): https://${FULL_DOMAIN}/test"
        echo ""
        echo "üìç ENDPOINTS DE TEST:"
        echo "   - https://${FULL_DOMAIN}/test/coordenadas"
        echo "   - https://${FULL_DOMAIN}/test/database"
        echo "   - https://${FULL_DOMAIN}/test/version"
        echo "   - https://${FULL_DOMAIN}/test/health"
        echo ""
        echo "üõ†Ô∏è COMANDOS √öTILES:"
        echo "   - Ver logs test: pm2 logs ${APP_NAME}"
        echo "   - Reiniciar test: pm2 restart ${APP_NAME}"
        echo "   - Ver logs prod: pm2 logs flask-app-${SUBDOMAIN}"
        echo "   - Estado: pm2 status"
        echo "   - OSRM logs: docker logs -f osrm-backend"
        echo ""
        echo "üó∫Ô∏è OSRM configurado para Departamento del Atl√°ntico"
        echo "   M√©todo: Overpass API + Relaci√≥n OSM 1315209"
        echo "   Cobertura: Todos los municipios del Atl√°ntico"
        echo "========================================="
        DEPLOYEOF
        
        # Transferir scripts
        echo "üì§ Transfiriendo archivos al servidor..."
        scp -o StrictHostKeyChecking=no -i deploy_key setup_osrm.sh ${USER}@${HOST}:/tmp/
        scp -o StrictHostKeyChecking=no -i deploy_key temp_env_file ${USER}@${HOST}:/tmp/test_env_file
        scp -o StrictHostKeyChecking=no -i deploy_key deploy_test_remote.sh ${USER}@${HOST}:/tmp/
        
        # Ejecutar instalaci√≥n/verificaci√≥n de OSRM PRIMERO
        echo ""
        echo "üó∫Ô∏è ========================================="
        echo "üó∫Ô∏è PASO 1: CONFIGURAR OSRM (ATL√ÅNTICO)"
        echo "üó∫Ô∏è ========================================="
        ssh -o StrictHostKeyChecking=no -i deploy_key ${USER}@${HOST} \
          "chmod +x /tmp/setup_osrm.sh && /tmp/setup_osrm.sh"
        
        # Ejecutar despliegue de la aplicaci√≥n
        echo ""
        echo "üöÄ ========================================="
        echo "üöÄ PASO 2: DESPLEGAR APLICACI√ìN"
        echo "üöÄ ========================================="
        ssh -o StrictHostKeyChecking=no -i deploy_key ${USER}@${HOST} \
          "chmod +x /tmp/deploy_test_remote.sh && \
           /tmp/deploy_test_remote.sh '${NAME_LOWER}' '${DOMAIN_BASE}' '${INSTANCE_NUM}' '${BRANCH_NAME}' '${PERSON_NAME}' && \
           if [ -f /tmp/test_env_file ]; then \
             if [ -d /home/ubuntu/Web-server-UDP/test/Proyecto_1_Diseno ]; then \
               mv /tmp/test_env_file /home/ubuntu/Web-server-UDP/test/Proyecto_1_Diseno/.env; \
             else \
               mv /tmp/test_env_file /opt/location-tracker/test/Proyecto_1_Diseno/.env; \
             fi; \
           fi; \
           rm -f /tmp/deploy_test_remote.sh /tmp/setup_osrm.sh"
        
        # Limpiar archivos temporales locales
        rm -f deploy_key temp_env_file deploy_test_remote.sh setup_osrm.sh
        
        echo ""
        echo "========================================="
        echo "‚úÖ DESPLIEGUE COMPLETADO"
        echo "========================================="
        echo ""
        echo "üéâ ${PERSON_NAME} puede ver sus cambios en:"
        echo "   üì± https://${FULL_DOMAIN}/test"
        echo ""
        echo "üó∫Ô∏è OSRM (Snap-to-Roads) configurado:"
        echo "   ‚úÖ M√©todo: Overpass API"
        echo "   ‚úÖ Fuente: OpenStreetMap Relaci√≥n 1315209"
        echo "   ‚úÖ √Årea: Departamento del Atl√°ntico completo"
        echo "   ‚úÖ L√≠mites: Pol√≠ticos oficiales"
        echo "   ‚úÖ Puerto local: 5001"
        echo ""
        echo "üìä Cobertura del mapa:"
        echo "   ‚úÖ Barranquilla y √°rea metropolitana"
        echo "   ‚úÖ Todos los municipios del Atl√°ntico"
        echo "   ‚úÖ Carreteras principales y secundarias"
        echo "========================================"