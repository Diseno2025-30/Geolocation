name: Deploy Feature Branch to Test

on:
  push:
    branches:
      - Oliver-branch
      - Hernando-branch
      - Alan-branch
      - Sebastian-branch
  workflow_dispatch:
    inputs:
      branch:
        description: "Feature branch to deploy"
        required: true
        type: choice
        options:
          - Oliver-branch
          - Hernando-branch
          - Alan-branch
          - Sebastian-branch

jobs:
  deploy-feature:
    # Determinar el runner seg√∫n la rama
    runs-on: ${{ github.ref_name == 'Hernando-branch' && fromJSON('["self-hosted", "EC2", "Hernando-branch"]') || 'ubuntu-latest' }}
    
    steps:
    - name: Verify EC2 instance (only for self-hosted)
      if: github.ref_name == 'Hernando-branch'
      run: |
        echo "üîç Verificando instancia EC2..."
        INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id || echo "No disponible")
        HOSTNAME=$(hostname)
        echo "üìç Instance ID: $INSTANCE_ID"
        echo "üìç Hostname: $HOSTNAME"
        echo "‚úÖ Ejecutando en modo SELF-HOSTED"
    
    - name: Determine target instance
      id: determine-instance
      run: |
        # Determinar la rama actual
        if [ "${{ github.event_name }}" = "push" ]; then
          BRANCH_NAME="${{ github.ref_name }}"
        else
          BRANCH_NAME="${{ github.event.inputs.branch }}"
        fi
        
        echo "Branch to deploy: ${BRANCH_NAME}"
        
        # Mapear rama a instancia
        case "${BRANCH_NAME}" in
          "Oliver-branch")
            INSTANCE_NUM=1
            PERSON_NAME="Oliver"
            ;;
          "Hernando-branch")
            INSTANCE_NUM=2
            PERSON_NAME="Hernando"
            ;;
          "Alan-branch")
            INSTANCE_NUM=3
            PERSON_NAME="Alan"
            ;;
          "Sebastian-branch")
            INSTANCE_NUM=4
            PERSON_NAME="Sebastian"
            ;;
          *)
            echo "‚ùå Rama no reconocida: ${BRANCH_NAME}"
            exit 1
            ;;
        esac
        
        echo "TARGET_INSTANCE=${INSTANCE_NUM}" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        echo "PERSON_NAME=${PERSON_NAME}" >> $GITHUB_OUTPUT
        
        if [ "${BRANCH_NAME}" = "Hernando-branch" ]; then
          echo "üè† SELF-HOSTED: Desplegando ${BRANCH_NAME} localmente en instancia ${INSTANCE_NUM}"
        else
          echo "‚òÅÔ∏è  GITHUB-HOSTED: Desplegando ${BRANCH_NAME} via SSH a instancia ${INSTANCE_NUM}"
        fi

    - name: Checkout branch
      uses: actions/checkout@v3
      with:
        ref: ${{ steps.determine-instance.outputs.BRANCH_NAME }}

    # DEPLOY PARA HERNANDO (SELF-HOSTED) - SIN SSH
    - name: Deploy to local instance (Hernando only)
      if: steps.determine-instance.outputs.BRANCH_NAME == 'Hernando-branch'
      env:
        ENV_FILE: ${{ secrets.ENV_FILE_2 }}
        DOMAIN_BASE: tumaquinaya.com
        BRANCH_NAME: ${{ steps.determine-instance.outputs.BRANCH_NAME }}
        PERSON_NAME: ${{ steps.determine-instance.outputs.PERSON_NAME }}
        INSTANCE_NUM: ${{ steps.determine-instance.outputs.TARGET_INSTANCE }}
      run: |
        echo "üöÄ SELF-HOSTED: Desplegando ${BRANCH_NAME} localmente"
        
        # Crear archivo .env directamente
        echo "$ENV_FILE" > /tmp/test_env_file
        
        # Extraer NAME del .env
        NAME_VALUE=$(grep "^NAME=" /tmp/test_env_file | cut -d'=' -f2 | tr -d '"' | tr -d "'" | xargs)
        NAME_LOWER=$(echo "$NAME_VALUE" | tr '[:upper:]' '[:lower:]')
        PERSON_LOWER=$(echo "$PERSON_NAME" | tr '[:upper:]' '[:lower:]')
        
        if [ "${NAME_LOWER}" != "${PERSON_LOWER}" ]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El NAME en .env (${NAME_VALUE}) no coincide con ${PERSON_NAME}"
        fi
        
        FULL_DOMAIN="${NAME_LOWER}.${DOMAIN_BASE}"
        
        echo "üìã Configuraci√≥n:"
        echo "   - Rama: ${BRANCH_NAME}"
        echo "   - Persona: ${PERSON_NAME}"
        echo "   - Instancia: ${INSTANCE_NUM}"
        echo "   - Dominio: ${FULL_DOMAIN}"
        echo "   - Modo: SELF-HOSTED (local)"
        
        # Crear script de despliegue local
        cat > /tmp/deploy_test_local.sh << 'DEPLOYEOF'
        #!/bin/bash
        set -e
        
        SUBDOMAIN="${1}"
        DOMAIN_BASE="${2}"
        INSTANCE_NUM="${3}"
        BRANCH_NAME="${4}"
        PERSON_NAME="${5}"
        
        echo "üîß Configuraci√≥n de despliegue /test (SELF-HOSTED):"
        echo "   - Rama: ${BRANCH_NAME}"
        echo "   - Persona: ${PERSON_NAME}"
        echo "   - Subdominio: ${SUBDOMAIN}"
        echo "   - Dominio: ${SUBDOMAIN}.${DOMAIN_BASE}"
        echo "   - Instancia: ${INSTANCE_NUM}"
        
        BASE_DIR="/opt/location-tracker"
        TEST_DIR="${BASE_DIR}/test"
        mkdir -p "${TEST_DIR}"
        cd "${TEST_DIR}"
        
        echo "üìÅ Directorio de test: ${TEST_DIR}"
        
        if [ -d .git ]; then
          echo "üì¶ Actualizando c√≥digo de la rama ${BRANCH_NAME}..."
          git fetch origin ${BRANCH_NAME}
          git checkout ${BRANCH_NAME}
          git reset --hard origin/${BRANCH_NAME}
          CODE_UPDATED=true
        else
          echo "üì• Clonando repositorio en rama ${BRANCH_NAME}..."
          git clone -b ${BRANCH_NAME} https://github.com/Diseno2025-30/Geolocation.git .
          CODE_UPDATED=true
        fi
        
        cd Proyecto_1_Diseno
        PROJECT_PATH=$(pwd)
        
        if [ -f "${BASE_DIR}/Proyecto_1_Diseno/.env" ]; then
          cp "${BASE_DIR}/Proyecto_1_Diseno/.env" .env
        fi
        
        echo "" >> .env
        echo "# Configuraci√≥n de test" >> .env
        echo "TEST_MODE=true" >> .env
        echo "BRANCH_NAME=${BRANCH_NAME}" >> .env
        echo "PERSON_NAME=${PERSON_NAME}" >> .env
        
        FULL_DOMAIN="${SUBDOMAIN}.${DOMAIN_BASE}"
        APP_NAME="flask-test-${SUBDOMAIN}"
        TEST_PORT=6000
        
        echo "üìä Configuraci√≥n:"
        echo "   - APP_NAME: ${APP_NAME}"
        echo "   - Puerto test: ${TEST_PORT}"
        echo "   - Proyecto: ${PROJECT_PATH}"
        
        echo "üì¶ Instalando dependencias..."
        sudo apt-get update -qq
        sudo apt-get install -y python3-pip python3-venv nginx
        
        if ! command -v pm2 &> /dev/null; then
          if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          sudo npm install -g pm2
          pm2 startup systemd -u ubuntu --hp /home/ubuntu
        fi
        
        echo "üêç Configurando entorno Python para test..."
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        
        source venv/bin/activate
        pip install --upgrade pip
        pip install flask psycopg2-binary python-dotenv
        
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        pm2 stop ${APP_NAME} 2>/dev/null || true
        pm2 delete ${APP_NAME} 2>/dev/null || true
        sudo fuser -k ${TEST_PORT}/tcp 2>/dev/null || true
        sleep 2
        
        cat > start_test_app.sh << STARTSCRIPT
        #!/bin/bash
        cd "\$(dirname "\$0")"
        source venv/bin/activate
        export FLASK_APP=udp_flask_server.py
        export FLASK_ENV=development
        python udp_flask_server.py --port ${TEST_PORT}
        STARTSCRIPT
        chmod +x start_test_app.sh
        
        echo "üåê Configurando Nginx para /test..."
        NGINX_CONF="/etc/nginx/sites-available/location-tracker"
        sudo sed -i '/# ===== INICIO RUTAS TEST/,/# ===== FIN RUTAS TEST/d' ${NGINX_CONF}
        
        cat > /tmp/nginx-test-inject.conf << NGINXTEST
        
        # ===== INICIO RUTAS TEST =====
        # Rama: ${BRANCH_NAME} - Persona: ${PERSON_NAME}
        # Actualizado: $(date)
        
        location = /test {
            return 301 /test/;
        }
        
        location /test/ {
            proxy_pass http://localhost:${TEST_PORT}/;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            proxy_set_header X-Script-Name /test;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off;
        }
        
        location ~ ^/test/(coordenadas|database|version|health)$ {
            proxy_pass http://localhost:${TEST_PORT}/\$1;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
        
        location /test/static/ {
            alias ${PROJECT_PATH}/static/;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
        
        # ===== FIN RUTAS TEST =====
        
        NGINXTEST
        
        sudo awk '
        /location \/ \{/ {
            while ((getline line < "/tmp/nginx-test-inject.conf") > 0)
                print line
            close("/tmp/nginx-test-inject.conf")
        }
        { print }
        ' ${NGINX_CONF} > /tmp/nginx-new.conf
        
        sudo mv /tmp/nginx-new.conf ${NGINX_CONF}
        rm -f /tmp/nginx-test-inject.conf
        
        if sudo nginx -t; then
          sudo systemctl reload nginx
          echo "‚úÖ Nginx configurado para /test"
        else
          echo "‚ùå Error en configuraci√≥n de Nginx"
          sudo nginx -t
          exit 1
        fi
        
        echo "üöÄ Iniciando aplicaci√≥n de test..."
        pm2 start start_test_app.sh \
          --name ${APP_NAME} \
          --interpreter bash \
          --cwd ${PROJECT_PATH} \
          --log-date-format "YYYY-MM-DD HH:mm:ss"
        
        pm2 save
        
        echo "‚è≥ Esperando inicio de la aplicaci√≥n..."
        sleep 5
        
        echo "üìä Estado de la aplicaci√≥n:"
        pm2 status ${APP_NAME}
        
        echo "üß™ Probando aplicaci√≥n..."
        if curl -s -f http://localhost:${TEST_PORT}/ > /dev/null 2>&1; then
          echo "‚úÖ Aplicaci√≥n respondiendo en puerto ${TEST_PORT}"
        else
          echo "‚ö†Ô∏è La aplicaci√≥n no responde"
          pm2 logs ${APP_NAME} --lines 20 --nostream
        fi
        
        echo ""
        echo "========================================="
        echo "üéâ AMBIENTE DE TEST DESPLEGADO (SELF-HOSTED)"
        echo "========================================="
        echo ""
        echo "üìä INFORMACI√ìN:"
        echo "   - Persona: ${PERSON_NAME}"
        echo "   - Rama: ${BRANCH_NAME}"
        echo "   - Instancia EC2: ${INSTANCE_NUM}"
        echo "   - Aplicaci√≥n PM2: ${APP_NAME}"
        echo "   - Puerto interno: ${TEST_PORT}"
        echo "   - Modo: LOCAL (sin SSH)"
        echo ""
        echo "üîó URLS:"
        echo "   - Producci√≥n (main): https://${FULL_DOMAIN}/"
        echo "   - Test (${BRANCH_NAME}): https://${FULL_DOMAIN}/test"
        echo ""
        echo "üìç ENDPOINTS DE TEST:"
        echo "   - https://${FULL_DOMAIN}/test/coordenadas"
        echo "   - https://${FULL_DOMAIN}/test/database"
        echo "   - https://${FULL_DOMAIN}/test/version"
        echo "   - https://${FULL_DOMAIN}/test/health"
        echo ""
        echo "üõ†Ô∏è COMANDOS √öTILES:"
        echo "   - Ver logs test: pm2 logs ${APP_NAME}"
        echo "   - Reiniciar test: pm2 restart ${APP_NAME}"
        echo "   - Ver logs prod: pm2 logs flask-app-${SUBDOMAIN}"
        echo "   - Estado: pm2 status"
        echo "========================================="
        DEPLOYEOF
        
        chmod +x /tmp/deploy_test_local.sh
        
        # Ejecutar localmente (sin SSH)
        /tmp/deploy_test_local.sh "${NAME_LOWER}" "${DOMAIN_BASE}" "${INSTANCE_NUM}" "${BRANCH_NAME}" "${PERSON_NAME}"
        
        # Mover el archivo .env a su ubicaci√≥n final
        if [ -f /tmp/test_env_file ]; then
          mv /tmp/test_env_file /opt/location-tracker/test/Proyecto_1_Diseno/.env
        fi
        
        # Limpiar
        rm -f /tmp/deploy_test_local.sh
        
        echo "‚úÖ Despliegue SELF-HOSTED completado para ${PERSON_NAME}"

    # DEPLOY PARA OTRAS RAMAS (GITHUB-HOSTED) - CON SSH
    - name: Deploy to assigned instance (Others via SSH)
      if: steps.determine-instance.outputs.BRANCH_NAME != 'Hernando-branch'
      env:
        HOST: ${{ secrets[format('EC2_HOST_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
        USER: ${{ secrets[format('EC2_USER_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
        KEY: ${{ secrets[format('EC2_SSH_KEY_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
        ENV_FILE: ${{ secrets[format('ENV_FILE_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
        DOMAIN_BASE: tumaquinaya.com
        BRANCH_NAME: ${{ steps.determine-instance.outputs.BRANCH_NAME }}
        PERSON_NAME: ${{ steps.determine-instance.outputs.PERSON_NAME }}
        INSTANCE_NUM: ${{ steps.determine-instance.outputs.TARGET_INSTANCE }}
      run: |
        echo "‚òÅÔ∏è GITHUB-HOSTED: Desplegando ${BRANCH_NAME} via SSH a instancia ${INSTANCE_NUM}"
        
        echo "$KEY" > deploy_key
        chmod 600 deploy_key
        echo "$ENV_FILE" > temp_env_file
        
        NAME_VALUE=$(grep "^NAME=" temp_env_file | cut -d'=' -f2 | tr -d '"' | tr -d "'" | xargs)
        NAME_LOWER=$(echo "$NAME_VALUE" | tr '[:upper:]' '[:lower:]')
        PERSON_LOWER=$(echo "$PERSON_NAME" | tr '[:upper:]' '[:lower:]')
        
        if [ "${NAME_LOWER}" != "${PERSON_LOWER}" ]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El NAME en .env (${NAME_VALUE}) no coincide con ${PERSON_NAME}"
        fi
        
        FULL_DOMAIN="${NAME_LOWER}.${DOMAIN_BASE}"
        
        echo "üìã Configuraci√≥n:"
        echo "   - Rama: ${BRANCH_NAME}"
        echo "   - Persona: ${PERSON_NAME}"
        echo "   - Instancia: ${INSTANCE_NUM}"
        echo "   - Dominio: ${FULL_DOMAIN}"
        echo "   - Modo: SSH remoto"
        
        cat > deploy_test_remote.sh << 'DEPLOYEOF'
        #!/bin/bash
        set -e
        
        SUBDOMAIN="${1}"
        DOMAIN_BASE="${2}"
        INSTANCE_NUM="${3}"
        BRANCH_NAME="${4}"
        PERSON_NAME="${5}"
        
        echo "üîß Configuraci√≥n de despliegue /test (SSH):"
        echo "   - Rama: ${BRANCH_NAME}"
        echo "   - Persona: ${PERSON_NAME}"
        echo "   - Subdominio: ${SUBDOMAIN}"
        echo "   - Dominio: ${SUBDOMAIN}.${DOMAIN_BASE}"
        echo "   - Instancia: ${INSTANCE_NUM}"
        
        if [ -d "/home/ubuntu/Web-server-UDP" ]; then
          BASE_DIR="/home/ubuntu/Web-server-UDP"
        else
          BASE_DIR="/opt/location-tracker"
          sudo mkdir -p ${BASE_DIR}
          sudo chown $USER:$USER ${BASE_DIR}
        fi
        
        TEST_DIR="${BASE_DIR}/test"
        mkdir -p "${TEST_DIR}"
        cd "${TEST_DIR}"
        
        echo "üìÅ Directorio de test: ${TEST_DIR}"
        
        if [ -d .git ]; then
          echo "üì¶ Actualizando c√≥digo de la rama ${BRANCH_NAME}..."
          git fetch origin ${BRANCH_NAME}
          git checkout ${BRANCH_NAME}
          git reset --hard origin/${BRANCH_NAME}
          CODE_UPDATED=true
        else
          echo "üì• Clonando repositorio en rama ${BRANCH_NAME}..."
          git clone -b ${BRANCH_NAME} https://github.com/Diseno2025-30/Geolocation.git .
          CODE_UPDATED=true
        fi
        
        cd Proyecto_1_Diseno
        PROJECT_PATH=$(pwd)
        
        if [ -f "${BASE_DIR}/Proyecto_1_Diseno/.env" ]; then
          cp "${BASE_DIR}/Proyecto_1_Diseno/.env" .env
        fi
        
        echo "" >> .env
        echo "# Configuraci√≥n de test" >> .env
        echo "TEST_MODE=true" >> .env
        echo "BRANCH_NAME=${BRANCH_NAME}" >> .env
        echo "PERSON_NAME=${PERSON_NAME}" >> .env
        
        FULL_DOMAIN="${SUBDOMAIN}.${DOMAIN_BASE}"
        APP_NAME="flask-test-${SUBDOMAIN}"
        TEST_PORT=6000
        
        echo "üìä Configuraci√≥n:"
        echo "   - APP_NAME: ${APP_NAME}"
        echo "   - Puerto test: ${TEST_PORT}"
        echo "   - Proyecto: ${PROJECT_PATH}"
        
        echo "üì¶ Instalando dependencias..."
        sudo apt-get update -qq
        sudo apt-get install -y python3-pip python3-venv nginx
        
        if ! command -v pm2 &> /dev/null; then
          if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          sudo npm install -g pm2
          pm2 startup systemd -u $USER --hp /home/$USER
        fi
        
        echo "üêç Configurando entorno Python para test..."
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        
        source venv/bin/activate
        pip install --upgrade pip
        pip install flask psycopg2-binary python-dotenv
        
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        pm2 stop ${APP_NAME} 2>/dev/null || true
        pm2 delete ${APP_NAME} 2>/dev/null || true
        sudo fuser -k ${TEST_PORT}/tcp 2>/dev/null || true
        sleep 2
        
        cat > start_test_app.sh << STARTSCRIPT
        #!/bin/bash
        cd "\$(dirname "\$0")"
        source venv/bin/activate
        export FLASK_APP=udp_flask_server.py
        export FLASK_ENV=development
        python udp_flask_server.py --port ${TEST_PORT}
        STARTSCRIPT
        chmod +x start_test_app.sh
        
        echo "üåê Configurando Nginx para /test..."
        NGINX_CONF="/etc/nginx/sites-available/location-tracker"
        sudo sed -i '/# ===== INICIO RUTAS TEST/,/# ===== FIN RUTAS TEST/d' ${NGINX_CONF}
        
        cat > /tmp/nginx-test-inject.conf << NGINXTEST
        
        # ===== INICIO RUTAS TEST =====
        # Rama: ${BRANCH_NAME} - Persona: ${PERSON_NAME}
        # Actualizado: $(date)
        
        location = /test {
            return 301 /test/;
        }
        
        location /test/ {
            proxy_pass http://localhost:${TEST_PORT}/;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            proxy_set_header X-Script-Name /test;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off;
        }
        
        location ~ ^/test/(coordenadas|database|version|health)$ {
            proxy_pass http://localhost:${TEST_PORT}/\$1;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
        
        location /test/static/ {
            alias ${PROJECT_PATH}/static/;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
        
        # ===== FIN RUTAS TEST =====
        
        NGINXTEST
        
        sudo awk '
        /location \/ \{/ {
            while ((getline line < "/tmp/nginx-test-inject.conf") > 0)
                print line
            close("/tmp/nginx-test-inject.conf")
        }
        { print }
        ' ${NGINX_CONF} > /tmp/nginx-new.conf
        
        sudo mv /tmp/nginx-new.conf ${NGINX_CONF}
        rm -f /tmp/nginx-test-inject.conf
        
        if sudo nginx -t; then
          sudo systemctl reload nginx
          echo "‚úÖ Nginx configurado para /test"
        else
          echo "‚ùå Error en configuraci√≥n de Nginx"
          sudo nginx -t
          exit 1
        fi
        
        echo "üöÄ Iniciando aplicaci√≥n de test..."
        pm2 start start_test_app.sh \
          --name ${APP_NAME} \
          --interpreter bash \
          --cwd ${PROJECT_PATH} \
          --log-date-format "YYYY-MM-DD HH:mm:ss"
        
        pm2 save
        
        echo "‚è≥ Esperando inicio de la aplicaci√≥n..."
        sleep 5
        
        echo "üìä Estado de la aplicaci√≥n:"
        pm2 status ${APP_NAME}
        
        echo "üß™ Probando aplicaci√≥n..."
        if curl -s -f http://localhost:${TEST_PORT}/ > /dev/null 2>&1; then
          echo "‚úÖ Aplicaci√≥n respondiendo en puerto ${TEST_PORT}"
        else
          echo "‚ö†Ô∏è La aplicaci√≥n no responde"
          pm2 logs ${APP_NAME} --lines 20 --nostream
        fi
        
        echo ""
        echo "========================================="
        echo "üéâ AMBIENTE DE TEST DESPLEGADO (SSH)"
        echo "========================================="
        echo ""
        echo "üìä INFORMACI√ìN:"
        echo "   - Persona: ${PERSON_NAME}"
        echo "   - Rama: ${BRANCH_NAME}"
        echo "   - Instancia EC2: ${INSTANCE_NUM}"
        echo "   - Aplicaci√≥n PM2: ${APP_NAME}"
        echo "   - Puerto interno: ${TEST_PORT}"
        echo "   - Modo: SSH remoto"
        echo ""
        echo "üîó URLS:"
        echo "   - Producci√≥n (main): https://${FULL_DOMAIN}/"
        echo "   - Test (${BRANCH_NAME}): https://${FULL_DOMAIN}/test"
        echo ""
        echo "üõ†Ô∏è COMANDOS √öTILES:"
        echo "   - Ver logs test: pm2 logs ${APP_NAME}"
        echo "   - Reiniciar test: pm2 restart ${APP_NAME}"
        echo "========================================="
        DEPLOYEOF
        
        scp -o StrictHostKeyChecking=no -i deploy_key temp_env_file ${USER}@${HOST}:/tmp/test_env_file
        scp -o StrictHostKeyChecking=no -i deploy_key deploy_test_remote.sh ${USER}@${HOST}:/tmp/
        
        ssh -o StrictHostKeyChecking=no -i deploy_key ${USER}@${HOST} \
          "chmod +x /tmp/deploy_test_remote.sh && \
           /tmp/deploy_test_remote.sh '${NAME_LOWER}' '${DOMAIN_BASE}' '${INSTANCE_NUM}' '${BRANCH_NAME}' '${PERSON_NAME}' && \
           if [ -f /tmp/test_env_file ]; then \
             if [ -d /home/ubuntu/Web-server-UDP/test/Proyecto_1_Diseno ]; then \
               mv /tmp/test_env_file /home/ubuntu/Web-server-UDP/test/Proyecto_1_Diseno/.env; \
             else \
               mv /tmp/test_env_file /opt/location-tracker/test/Proyecto_1_Diseno/.env; \
             fi; \
           fi; \
           rm -f /tmp/deploy_test_remote.sh"
        
        rm -f deploy_key temp_env_file deploy_test_remote.sh
        
        echo "‚úÖ Despliegue SSH completado para ${PERSON_NAME}"