name: Deploy Feature Branch to Test

on:
  push:
    branches:
      - Oliver-branch
      - Hernando-branch
      - Alan-branch
      - Sebastian-branch
  workflow_dispatch:
    inputs:
      branch:
        description: "Feature branch to deploy"
        required: true
        type: choice
        options:
          - Oliver-branch
          - Hernando-branch
          - Alan-branch
          - Sebastian-branch

jobs:
  deploy-feature:
    runs-on: ubuntu-latest
    
    steps:
    - name: Determine target instance
      id: determine-instance
      run: |
        # Determinar la rama actual
        if [ "${{ github.event_name }}" = "push" ]; then
          BRANCH_NAME="${{ github.ref_name }}"
        else
          BRANCH_NAME="${{ github.event.inputs.branch }}"
        fi
        
        echo "Branch to deploy: ${BRANCH_NAME}"
        
        # Mapear rama a instancia
        case "${BRANCH_NAME}" in
          "Oliver-branch")
            INSTANCE_NUM=1
            PERSON_NAME="Oliver"
            ;;
          "Hernando-branch")
            INSTANCE_NUM=2
            PERSON_NAME="Hernando"
            ;;
          "Alan-branch")
            INSTANCE_NUM=3
            PERSON_NAME="Alan"
            ;;
          "Sebastian-branch")
            INSTANCE_NUM=4
            PERSON_NAME="Sebastian"
            ;;
          *)
            echo "‚ùå Rama no reconocida: ${BRANCH_NAME}"
            exit 1
            ;;
        esac
        
        echo "TARGET_INSTANCE=${INSTANCE_NUM}" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        echo "PERSON_NAME=${PERSON_NAME}" >> $GITHUB_OUTPUT
         run: |
        echo "üöÄ Desplegando ${BRANCH_NAME} en instancia ${INSTANCE_NUM} (${PERSON_NAME}.${DOMAIN_BASE})"
        
        # Crear archivo de llave SSH
        echo "$KEY" > deploy_key
        chmod 600 deploy_key
        
        # Crear archivo .env temporal
        echo "$ENV_FILE" > temp_env_file
        
        # ... (La l√≥gica de verificaci√≥n de NAME no cambia) ...
        NAME_VALUE=$(grep "^NAME=" temp_env_file | cut -d'=' -f2 | tr -d '"' | tr -d "'" | xargs)
        NAME_LOWER=$(echo "$NAME_VALUE" | tr '[:upper:]' '[:lower:]')
        PERSON_LOWER=$(echo "$PERSON_NAME" | tr '[:upper:]' '[:lower:]')
        if [ "${NAME_LOWER}" != "${PERSON_LOWER}" ]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El NAME en .env (${NAME_VALUE}) no coincide con la persona asignada (${PERSON_NAME})"
        fi
        FULL_DOMAIN="${NAME_LOWER}.${DOMAIN_BASE}"
        echo "üìã Configuraci√≥n: ... (no cambia)"
        # ... (El script OSRMEOF no cambia) ...
        cat > setup_osrm.sh << 'OSRMEOF'
        #!/bin/bash
        # ... (contenido id√©ntico de setup_osrm.sh) ...
        echo "========================================="
        OSRMEOF
        
        # ... (El script DEPLOYEOF no cambia) ...
        cat > deploy_test_remote.sh << 'DEPLOYEOF'
        #!/bin/bash
        # ... (contenido id√©ntico de deploy_test_remote.sh) ...
        echo "========================================="
        DEPLOYEOF
        
        # --- INICIO DE CAMBIOS ---
        
        # Transferir scripts al directorio HOME (~)
        echo "üì§ Transfiriendo archivos al servidor (directorio home)..."
        scp -o StrictHostKeyChecking=no -i deploy_key setup_osrm.sh ${USER}@${HOST}:~/
        scp -o StrictHostKeyChecking=no -i deploy_key temp_env_file ${USER}@${HOST}:~/test_env_file
        scp -o StrictHostKeyChecking=no -i deploy_key deploy_test_remote.sh ${USER}@${HOST}:~/
        
        # Ejecutar OSRM desde el directorio HOME (~)
        echo ""
        echo "üó∫Ô∏è ========================================="
        echo "üó∫Ô∏è PASO 1: CONFIGURAR OSRM (PUERTO)"
        echo "üó∫Ô∏è ========================================="
        ssh -o StrictHostKeyChecking=no -i deploy_key ${USER}@${HOST} \
          "chmod +x ~/setup_osrm.sh && ~/setup_osrm.sh"
        
        # Ejecutar despliegue desde el directorio HOME (~)
        echo ""
        echo "üöÄ ========================================="
        echo "üöÄ PASO 2: DESPLEGAR APLICACI√ìN"
        echo "üöÄ ========================================="
        ssh -o StrictHostKeyChecking=no -i deploy_key ${USER}@${HOST} \
          "chmod +x ~/deploy_test_remote.sh && \
           ~/deploy_test_remote.sh '${NAME_LOWER}' '${DOMAIN_BASE}' '${INSTANCE_NUM}' '${BRANCH_NAME}' '${PERSON_NAME}' && \
           if [ -f ~/test_env_file ]; then \
             if [ -d /home/ubuntu/Web-server-UDP/test/Proyecto_1_Diseno ]; then \
               mv ~/test_env_file /home/ubuntu/Web-server-UDP/test/Proyecto_1_Diseno/.env; \
             else \
               mv ~/test_env_file /opt/location-tracker/test/Proyecto_1_Diseno/.env; \
             fi; \
           fi; \
           rm -f ~/deploy_test_remote.sh ~/setup_osrm.sh" # Limpiar desde HOME
        
        # --- FIN DE CAMBIOS ---

        # Limpiar archivos temporales locales
        rm -f deploy_key temp_env_file deploy_test_remote.sh setup_osrm.sh
        
        echo ""
        echo "========================================="
        echo "‚úÖ DESPLIEGUE COMPLETADO"
        # ... (Resto del script) ...
        # Eliminar configuraciones de test anteriores
        sudo sed -i '/# ===== INICIO RUTAS TEST/,/# ===== FIN RUTAS TEST/d' ${NGINX_CONF}
        
        # Crear archivo temporal con las rutas de test
        cat > /tmp/nginx-test-inject.conf << NGINXTEST
        
        # ===== INICIO RUTAS TEST =====
        # Rama: ${BRANCH_NAME} - Persona: ${PERSON_NAME}
        # Actualizado: $(date)
        
        location = /test {
            return 301 /test/;
        }
        
        location /test/static/ {
            alias ${PROJECT_PATH}/static/;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
        
        location /test/ {
            proxy_pass http://localhost:${TEST_PORT}/;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
            proxy_set_header X-Script-Name /test;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off;
        }
        
        location ~ ^/test/(coordenadas|database|version|health)$ {
            proxy_pass http://localhost:${TEST_PORT}/\$1;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
        
        # ===== FIN RUTAS TEST =====
        
        NGINXTEST
        
        # Insertar las rutas de test antes de la ubicaci√≥n principal
        sudo awk '
        /location \/ \{/ {
            while ((getline line < "/tmp/nginx-test-inject.conf") > 0)
                print line
            close("/tmp/nginx-test-inject.conf")
        }
        { print }
        ' ${NGINX_CONF} > /tmp/nginx-new.conf
        
        sudo mv /tmp/nginx-new.conf ${NGINX_CONF}
        rm -f /tmp/nginx-test-inject.conf
        
        # Verificar y recargar Nginx
        if sudo nginx -t; then
          sudo systemctl reload nginx
          echo "‚úÖ Nginx configurado para /test"
        else
          echo "‚ùå Error en configuraci√≥n de Nginx"
          sudo nginx -t
          exit 1
        fi
        
        # Iniciar aplicaci√≥n con PM2
        echo "üöÄ Iniciando aplicaci√≥n de test..."
        pm2 start start_test_app.sh \
          --name ${APP_NAME} \
          --interpreter bash \
          --cwd ${PROJECT_PATH} \
          --log-date-format "YYYY-MM-DD HH:mm:ss"
        
        pm2 save
        
        # Esperar y verificar
        echo "‚è≥ Esperando inicio de la aplicaci√≥n..."
        sleep 5
        
        # Verificaci√≥n
        echo "üìä Estado de la aplicaci√≥n:"
        pm2 status ${APP_NAME}
        
        # Test de conectividad
        echo "üß™ Probando aplicaci√≥n..."
        if curl -s -f http://localhost:${TEST_PORT}/ > /dev/null 2>&1; then
          echo "‚úÖ Aplicaci√≥n respondiendo en puerto ${TEST_PORT}"
        else
          echo "‚ö†Ô∏è La aplicaci√≥n no responde"
          pm2 logs ${APP_NAME} --lines 20 --nostream
        fi
        
        # Resumen final
        echo ""
        echo "========================================="
        echo "üéâ AMBIENTE DE TEST DESPLEGADO"
        echo "========================================="
        echo ""
        echo "üìä INFORMACI√ìN:"
        echo "   - Persona: ${PERSON_NAME}"
        echo "   - Rama: ${BRANCH_NAME}"
        echo "   - Instancia EC2: ${INSTANCE_NUM}"
        echo "   - Aplicaci√≥n PM2: ${APP_NAME}"
        echo "   - Puerto interno: ${TEST_PORT}"
        echo "   - OSRM: http://localhost:5001 (Puerto de Barranquilla)"
        echo ""
        echo "üîó URLS:"
        echo "   - Producci√≥n (main): https://${FULL_DOMAIN}/"
        echo "   - Test (${BRANCH_NAME}): https://${FULL_DOMAIN}/test"
        echo ""
        echo "üìç ENDPOINTS DE TEST:"
        echo "   - https://${FULL_DOMAIN}/test/coordenadas"
        echo "   - https://${FULL_DOMAIN}/test/database"
        echo "   - https://${FULL_DOMAIN}/test/version"
        echo "   - https://${FULL_DOMAIN}/test/health"
        echo ""
        echo "üõ†Ô∏è COMANDOS √öTILES:"
        echo "   - Ver logs test: pm2 logs ${APP_NAME}"
        echo "   - Reiniciar test: pm2 restart ${APP_NAME}"
        echo "   - Ver logs prod: pm2 logs flask-app-${SUBDOMAIN}"
        echo "   - Estado: pm2 status"
        echo "   - OSRM logs: docker logs -f osrm-backend"
        echo ""
        echo "üó∫Ô∏è OSRM configurado para Puerto de Barranquilla"
        echo "   M√©todo: Overpass API con IDs espec√≠ficos"
        echo "   Cobertura: ~75 calles del puerto + 6 nodos clave"
        echo "========================================="
        DEPLOYEOF
        
        # Transferir scripts
        echo "üì§ Transfiriendo archivos al servidor..."
        scp -o StrictHostKeyChecking=no -i deploy_key setup_osrm.sh ${USER}@${HOST}:/tmp/
        scp -o StrictHostKeyChecking=no -i deploy_key temp_env_file ${USER}@${HOST}:/tmp/test_env_file
        scp -o StrictHostKeyChecking=no -i deploy_key deploy_test_remote.sh ${USER}@${HOST}:/tmp/
        
        # Ejecutar instalaci√≥n/verificaci√≥n de OSRM PRIMERO
        echo ""
        echo "üó∫Ô∏è ========================================="
        echo "üó∫Ô∏è PASO 1: CONFIGURAR OSRM (PUERTO)"
        echo "üó∫Ô∏è ========================================="
        ssh -o StrictHostKeyChecking=no -i deploy_key ${USER}@${HOST} \
          "chmod +x /tmp/setup_osrm.sh && /tmp/setup_osrm.sh"
        
        # Ejecutar despliegue de la aplicaci√≥n
        echo ""
        echo "üöÄ ========================================="
        echo "üöÄ PASO 2: DESPLEGAR APLICACI√ìN"
        echo "üöÄ ========================================="
        ssh -o StrictHostKeyChecking=no -i deploy_key ${USER}@${HOST} \
          "chmod +x /tmp/deploy_test_remote.sh && \
           /tmp/deploy_test_remote.sh '${NAME_LOWER}' '${DOMAIN_BASE}' '${INSTANCE_NUM}' '${BRANCH_NAME}' '${PERSON_NAME}' && \
           if [ -f /tmp/test_env_file ]; then \
             if [ -d /home/ubuntu/Web-server-UDP/test/Proyecto_1_Diseno ]; then \
               mv /tmp/test_env_file /home/ubuntu/Web-server-UDP/test/Proyecto_1_Diseno/.env; \
             else \
               mv /tmp/test_env_file /opt/location-tracker/test/Proyecto_1_Diseno/.env; \
             fi; \
           fi; \
           rm -f /tmp/deploy_test_remote.sh /tmp/setup_osrm.sh"
        
        # Limpiar archivos temporales locales
        rm -f deploy_key temp_env_file deploy_test_remote.sh setup_osrm.sh
        
        echo ""
        echo "========================================="
        echo "‚úÖ DESPLIEGUE COMPLETADO"
        echo "========================================="
        echo ""
        echo "üéâ ${PERSON_NAME} puede ver sus cambios en:"
        echo "   üì± https://${FULL_DOMAIN}/test"
        echo ""
        echo "üó∫Ô∏è OSRM (Snap-to-Roads) configurado:"
        echo "   ‚úÖ M√©todo: Overpass API"
        echo "   ‚úÖ Fuente: OpenStreetMap (IDs espec√≠ficos)"
 
        echo "========================================"