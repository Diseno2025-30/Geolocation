name: Deploy Main to Self-Hosted Runners

on:
  push:
    branches: [main]
    paths:
      - "Proyecto_1_Diseno/**"
      - ".github/workflows/deploy-main.yml"
      - "!Proyecto_1_Diseno/test/**"
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  deploy-oliver:
    runs-on: self-hosted
    env:
      INSTANCE: 1
      NAME: oliver
    steps:
      - name: 🎯 Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📋 Display environment info
        run: |
          echo "🏃 Running on Oliver's instance (Instance 1)"
          echo "📂 Current directory: $(pwd)"
          echo "🖥️ Hostname: $(hostname)"
          echo "👤 User: $(whoami)"

      - name: 🔧 Setup environment
        env:
          ENV_FILE: ${{ secrets.ENV_FILE_1 }}
          DOMAIN_BASE: tumaquinaya.com
        run: |
          echo "🚀 Iniciando configuración para Oliver (Instance 1)..."
          
          # Determinar ruta del proyecto
          if [ -d "/home/ubuntu/Web-server-UDP" ]; then
            PROJECT_BASE="/home/ubuntu/Web-server-UDP"
          else
            PROJECT_BASE="/opt/location-tracker"
            sudo mkdir -p $PROJECT_BASE
            sudo chown $USER:$USER $PROJECT_BASE
          fi
          
          PROJECT_PATH="${PROJECT_BASE}/Proyecto_1_Diseno"
          echo "PROJECT_PATH=${PROJECT_PATH}" >> $GITHUB_ENV
          
          mkdir -p ${PROJECT_PATH}
          
          # Guardar .env
          echo "$ENV_FILE" > /tmp/temp_env_1
          
          # Extraer NAME del .env
          NAME_VALUE=$(grep "^NAME=" /tmp/temp_env_1 | cut -d'=' -f2 | tr -d '"' | tr -d "'" | tr '[:upper:]' '[:lower:]' | xargs)
          if [ -z "$NAME_VALUE" ]; then
            NAME_VALUE="oliver"
          fi
          
          echo "NAME_VALUE=${NAME_VALUE}" >> $GITHUB_ENV
          echo "FULL_DOMAIN=${NAME_VALUE}.${DOMAIN_BASE}" >> $GITHUB_ENV
          echo "APP_NAME=flask-app-${NAME_VALUE}" >> $GITHUB_ENV

      - name: 📥 Update code (preserve /test)
        run: |
          cd ${PROJECT_PATH}
          
          if [ -d .git ]; then
            echo "📦 Actualizando código (preservando /test)..."
            
            # Backup /test si existe
            if [ -d "test" ]; then
              cp -r test /tmp/test_backup_$$ 2>/dev/null || true
            fi
            
            git fetch origin main
            git reset --hard origin/main
            
            # Restaurar /test
            if [ -d "/tmp/test_backup_$$" ]; then
              rm -rf test
              mv /tmp/test_backup_$$ test
            fi
          else
            echo "📥 Clonando repositorio..."
            cd $(dirname ${PROJECT_PATH})
            git clone https://github.com/Diseno2025-30/Geolocation.git .
          fi
          
          cd ${PROJECT_PATH}
          cp /tmp/temp_env_1 .env

      - name: 🐍 Setup Python environment
        run: |
          cd ${PROJECT_PATH}
          
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          source venv/bin/activate
          pip install --upgrade pip -q
          pip install flask psycopg2-binary python-dotenv -q
          
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt -q
          fi
          
          # Crear script de inicio
          cat > start_app.sh << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          cd "$SCRIPT_DIR"
          source venv/bin/activate
          export FLASK_APP=udp_flask_server.py
          export FLASK_ENV=production
          export FLASK_TRUSTED_PROXIES="127.0.0.1"
          python udp_flask_server.py
          EOF
          chmod +x start_app.sh

      - name: 🚀 Deploy with PM2
        run: |
          cd ${PROJECT_PATH}
          
          # Limpiar apps antiguas
          pm2 delete "flask-app-1" 2>/dev/null || true
          
          if pm2 list | grep -q "${APP_NAME}"; then
            echo "🔄 Recargando ${APP_NAME}..."
            pm2 reload ${APP_NAME} --update-env
          else
            echo "🆕 Iniciando ${APP_NAME}..."
            sudo fuser -k 5000/tcp 2>/dev/null || true
            sleep 2
            pm2 start start_app.sh --name ${APP_NAME} --interpreter bash
          fi
          
          pm2 save
          sleep 3

      - name: 🧪 Verify deployment
        run: |
          echo "✅ Deployment completed for Oliver"
          echo "   - App: ${APP_NAME}"
          echo "   - URL: https://${FULL_DOMAIN}"
          pm2 status ${APP_NAME}
          
          if [ -d "${PROJECT_PATH}/test" ]; then
            echo "✅ /test directory preserved"
          fi

  deploy-hernando:
    runs-on: self-hosted
    needs: deploy-oliver  # Ejecutar secuencialmente para evitar conflictos
    env:
      INSTANCE: 2
      NAME: hernando
    steps:
      - name: 🎯 Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📋 Display environment info
        run: |
          echo "🏃 Running on Hernando's instance (Instance 2)"
          echo "📂 Current directory: $(pwd)"
          echo "🖥️ Hostname: $(hostname)"
          echo "👤 User: $(whoami)"

      - name: 🔧 Setup environment
        env:
          ENV_FILE: ${{ secrets.ENV_FILE_2 }}
          DOMAIN_BASE: tumaquinaya.com
        run: |
          echo "🚀 Iniciando configuración para Hernando (Instance 2)..."
          
          # Determinar ruta del proyecto
          if [ -d "/home/ubuntu/Web-server-UDP" ]; then
            PROJECT_BASE="/home/ubuntu/Web-server-UDP"
          else
            PROJECT_BASE="/opt/location-tracker"
            sudo mkdir -p $PROJECT_BASE
            sudo chown $USER:$USER $PROJECT_BASE
          fi
          
          PROJECT_PATH="${PROJECT_BASE}/Proyecto_1_Diseno"
          echo "PROJECT_PATH=${PROJECT_PATH}" >> $GITHUB_ENV
          
          mkdir -p ${PROJECT_PATH}
          
          # Guardar .env
          echo "$ENV_FILE" > /tmp/temp_env_2
          
          # Extraer NAME del .env
          NAME_VALUE=$(grep "^NAME=" /tmp/temp_env_2 | cut -d'=' -f2 | tr -d '"' | tr -d "'" | tr '[:upper:]' '[:lower:]' | xargs)
          if [ -z "$NAME_VALUE" ]; then
            NAME_VALUE="hernando"
          fi
          
          echo "NAME_VALUE=${NAME_VALUE}" >> $GITHUB_ENV
          echo "FULL_DOMAIN=${NAME_VALUE}.${DOMAIN_BASE}" >> $GITHUB_ENV
          echo "APP_NAME=flask-app-${NAME_VALUE}" >> $GITHUB_ENV

      - name: 📥 Update code (preserve /test)
        run: |
          cd ${PROJECT_PATH}
          
          if [ -d .git ]; then
            echo "📦 Actualizando código (preservando /test)..."
            
            # Backup /test si existe
            if [ -d "test" ]; then
              cp -r test /tmp/test_backup_$$ 2>/dev/null || true
            fi
            
            git fetch origin main
            git reset --hard origin/main
            
            # Restaurar /test
            if [ -d "/tmp/test_backup_$$" ]; then
              rm -rf test
              mv /tmp/test_backup_$$ test
            fi
          else
            echo "📥 Clonando repositorio..."
            cd $(dirname ${PROJECT_PATH})
            git clone https://github.com/Diseno2025-30/Geolocation.git .
          fi
          
          cd ${PROJECT_PATH}
          cp /tmp/temp_env_2 .env

      - name: 🐍 Setup Python environment
        run: |
          cd ${PROJECT_PATH}
          
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          source venv/bin/activate
          pip install --upgrade pip -q
          pip install flask psycopg2-binary python-dotenv -q
          
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt -q
          fi
          
          # Crear script de inicio
          cat > start_app.sh << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          cd "$SCRIPT_DIR"
          source venv/bin/activate
          export FLASK_APP=udp_flask_server.py
          export FLASK_ENV=production
          export FLASK_TRUSTED_PROXIES="127.0.0.1"
          python udp_flask_server.py
          EOF
          chmod +x start_app.sh

      - name: 🚀 Deploy with PM2
        run: |
          cd ${PROJECT_PATH}
          
          # Limpiar apps antiguas
          pm2 delete "flask-app-2" 2>/dev/null || true
          
          if pm2 list | grep -q "${APP_NAME}"; then
            echo "🔄 Recargando ${APP_NAME}..."
            pm2 reload ${APP_NAME} --update-env
          else
            echo "🆕 Iniciando ${APP_NAME}..."
            sudo fuser -k 5000/tcp 2>/dev/null || true
            sleep 2
            pm2 start start_app.sh --name ${APP_NAME} --interpreter bash
          fi
          
          pm2 save
          sleep 3

      - name: 🧪 Verify deployment
        run: |
          echo "✅ Deployment completed for Hernando"
          echo "   - App: ${APP_NAME}"
          echo "   - URL: https://${FULL_DOMAIN}"
          pm2 status ${APP_NAME}
          
          if [ -d "${PROJECT_PATH}/test" ]; then
            echo "✅ /test directory preserved"
          fi

  deploy-alan:
    runs-on: self-hosted
    needs: deploy-hernando  # Ejecutar secuencialmente
    env:
      INSTANCE: 3
      NAME: alan
    steps:
      - name: 🎯 Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📋 Display environment info
        run: |
          echo "🏃 Running on Alan's instance (Instance 3)"
          echo "📂 Current directory: $(pwd)"
          echo "🖥️ Hostname: $(hostname)"
          echo "👤 User: $(whoami)"

      - name: 🔧 Setup environment
        env:
          ENV_FILE: ${{ secrets.ENV_FILE_3 }}
          DOMAIN_BASE: tumaquinaya.com
        run: |
          echo "🚀 Iniciando configuración para Alan (Instance 3)..."
          
          # Determinar ruta del proyecto
          if [ -d "/home/ubuntu/Web-server-UDP" ]; then
            PROJECT_BASE="/home/ubuntu/Web-server-UDP"
          else
            PROJECT_BASE="/opt/location-tracker"
            sudo mkdir -p $PROJECT_BASE
            sudo chown $USER:$USER $PROJECT_BASE
          fi
          
          PROJECT_PATH="${PROJECT_BASE}/Proyecto_1_Diseno"
          echo "PROJECT_PATH=${PROJECT_PATH}" >> $GITHUB_ENV
          
          mkdir -p ${PROJECT_PATH}
          
          # Guardar .env
          echo "$ENV_FILE" > /tmp/temp_env_3
          
          # Extraer NAME del .env
          NAME_VALUE=$(grep "^NAME=" /tmp/temp_env_3 | cut -d'=' -f2 | tr -d '"' | tr -d "'" | tr '[:upper:]' '[:lower:]' | xargs)
          if [ -z "$NAME_VALUE" ]; then
            NAME_VALUE="alan"
          fi
          
          echo "NAME_VALUE=${NAME_VALUE}" >> $GITHUB_ENV
          echo "FULL_DOMAIN=${NAME_VALUE}.${DOMAIN_BASE}" >> $GITHUB_ENV
          echo "APP_NAME=flask-app-${NAME_VALUE}" >> $GITHUB_ENV

      - name: 📥 Update code (preserve /test)
        run: |
          cd ${PROJECT_PATH}
          
          if [ -d .git ]; then
            echo "📦 Actualizando código (preservando /test)..."
            
            # Backup /test si existe
            if [ -d "test" ]; then
              cp -r test /tmp/test_backup_$$ 2>/dev/null || true
            fi
            
            git fetch origin main
            git reset --hard origin/main
            
            # Restaurar /test
            if [ -d "/tmp/test_backup_$$" ]; then
              rm -rf test
              mv /tmp/test_backup_$$ test
            fi
          else
            echo "📥 Clonando repositorio..."
            cd $(dirname ${PROJECT_PATH})
            git clone https://github.com/Diseno2025-30/Geolocation.git .
          fi
          
          cd ${PROJECT_PATH}
          cp /tmp/temp_env_3 .env

      - name: 🐍 Setup Python environment
        run: |
          cd ${PROJECT_PATH}
          
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          source venv/bin/activate
          pip install --upgrade pip -q
          pip install flask psycopg2-binary python-dotenv -q
          
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt -q
          fi
          
          # Crear script de inicio
          cat > start_app.sh << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          cd "$SCRIPT_DIR"
          source venv/bin/activate
          export FLASK_APP=udp_flask_server.py
          export FLASK_ENV=production
          export FLASK_TRUSTED_PROXIES="127.0.0.1"
          python udp_flask_server.py
          EOF
          chmod +x start_app.sh

      - name: 🚀 Deploy with PM2
        run: |
          cd ${PROJECT_PATH}
          
          # Limpiar apps antiguas
          pm2 delete "flask-app-3" 2>/dev/null || true
          
          if pm2 list | grep -q "${APP_NAME}"; then
            echo "🔄 Recargando ${APP_NAME}..."
            pm2 reload ${APP_NAME} --update-env
          else
            echo "🆕 Iniciando ${APP_NAME}..."
            sudo fuser -k 5000/tcp 2>/dev/null || true
            sleep 2
            pm2 start start_app.sh --name ${APP_NAME} --interpreter bash
          fi
          
          pm2 save
          sleep 3

      - name: 🧪 Verify deployment
        run: |
          echo "✅ Deployment completed for Alan"
          echo "   - App: ${APP_NAME}"
          echo "   - URL: https://${FULL_DOMAIN}"
          pm2 status ${APP_NAME}
          
          if [ -d "${PROJECT_PATH}/test" ]; then
            echo "✅ /test directory preserved"
          fi

  deploy-sebastian:
    runs-on: self-hosted
    needs: deploy-alan  # Ejecutar secuencialmente
    env:
      INSTANCE: 4
      NAME: sebastian
    steps:
      - name: 🎯 Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📋 Display environment info
        run: |
          echo "🏃 Running on Sebastian's instance (Instance 4)"
          echo "📂 Current directory: $(pwd)"
          echo "🖥️ Hostname: $(hostname)"
          echo "👤 User: $(whoami)"

      - name: 🔧 Setup environment
        env:
          ENV_FILE: ${{ secrets.ENV_FILE_4 }}
          DOMAIN_BASE: tumaquinaya.com
        run: |
          echo "🚀 Iniciando configuración para Sebastian (Instance 4)..."
          
          # Determinar ruta del proyecto
          if [ -d "/home/ubuntu/Web-server-UDP" ]; then
            PROJECT_BASE="/home/ubuntu/Web-server-UDP"
          else
            PROJECT_BASE="/opt/location-tracker"
            sudo mkdir -p $PROJECT_BASE
            sudo chown $USER:$USER $PROJECT_BASE
          fi
          
          PROJECT_PATH="${PROJECT_BASE}/Proyecto_1_Diseno"
          echo "PROJECT_PATH=${PROJECT_PATH}" >> $GITHUB_ENV
          
          mkdir -p ${PROJECT_PATH}
          
          # Guardar .env
          echo "$ENV_FILE" > /tmp/temp_env_4
          
          # Extraer NAME del .env
          NAME_VALUE=$(grep "^NAME=" /tmp/temp_env_4 | cut -d'=' -f2 | tr -d '"' | tr -d "'" | tr '[:upper:]' '[:lower:]' | xargs)
          if [ -z "$NAME_VALUE" ]; then
            NAME_VALUE="sebastian"
          fi
          
          echo "NAME_VALUE=${NAME_VALUE}" >> $GITHUB_ENV
          echo "FULL_DOMAIN=${NAME_VALUE}.${DOMAIN_BASE}" >> $GITHUB_ENV
          echo "APP_NAME=flask-app-${NAME_VALUE}" >> $GITHUB_ENV

      - name: 📥 Update code (preserve /test)
        run: |
          cd ${PROJECT_PATH}
          
          if [ -d .git ]; then
            echo "📦 Actualizando código (preservando /test)..."
            
            # Backup /test si existe
            if [ -d "test" ]; then
              cp -r test /tmp/test_backup_$$ 2>/dev/null || true
            fi
            
            git fetch origin main
            git reset --hard origin/main
            
            # Restaurar /test
            if [ -d "/tmp/test_backup_$$" ]; then
              rm -rf test
              mv /tmp/test_backup_$$ test
            fi
          else
            echo "📥 Clonando repositorio..."
            cd $(dirname ${PROJECT_PATH})
            git clone https://github.com/Diseno2025-30/Geolocation.git .
          fi
          
          cd ${PROJECT_PATH}
          cp /tmp/temp_env_4 .env

      - name: 🐍 Setup Python environment
        run: |
          cd ${PROJECT_PATH}
          
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          source venv/bin/activate
          pip install --upgrade pip -q
          pip install flask psycopg2-binary python-dotenv -q
          
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt -q
          fi
          
          # Crear script de inicio
          cat > start_app.sh << 'EOF'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          cd "$SCRIPT_DIR"
          source venv/bin/activate
          export FLASK_APP=udp_flask_server.py
          export FLASK_ENV=production
          export FLASK_TRUSTED_PROXIES="127.0.0.1"
          python udp_flask_server.py
          EOF
          chmod +x start_app.sh

      - name: 🚀 Deploy with PM2
        run: |
          cd ${PROJECT_PATH}
          
          # Limpiar apps antiguas
          pm2 delete "flask-app-4" 2>/dev/null || true
          
          if pm2 list | grep -q "${APP_NAME}"; then
            echo "🔄 Recargando ${APP_NAME}..."
            pm2 reload ${APP_NAME} --update-env
          else
            echo "🆕 Iniciando ${APP_NAME}..."
            sudo fuser -k 5000/tcp 2>/dev/null || true
            sleep 2
            pm2 start start_app.sh --name ${APP_NAME} --interpreter bash
          fi
          
          pm2 save
          sleep 3

      - name: 🧪 Verify deployment
        run: |
          echo "✅ Deployment completed for Sebastian"
          echo "   - App: ${APP_NAME}"
          echo "   - URL: https://${FULL_DOMAIN}"
          pm2 status ${APP_NAME}
          
          if [ -d "${PROJECT_PATH}/test" ]; then
            echo "✅ /test directory preserved"
          fi

  summary:
    runs-on: self-hosted
    needs: [deploy-oliver, deploy-hernando, deploy-alan, deploy-sebastian]
    if: always()  # Ejecutar siempre, incluso si algún deployment falla
    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "========================================="
          echo "🎉 DEPLOYMENT SUMMARY"
          echo "========================================="
          echo ""
          echo "📊 STATUS:"
          echo "   Oliver: ${{ needs.deploy-oliver.result }}"
          echo "   Hernando: ${{ needs.deploy-hernando.result }}"
          echo "   Alan: ${{ needs.deploy-alan.result }}"
          echo "   Sebastian: ${{ needs.deploy-sebastian.result }}"
          echo ""
          echo "🔗 URLS:"
          echo "   - https://oliver.tumaquinaya.com"
          echo "   - https://hernando.tumaquinaya.com"
          echo "   - https://alan.tumaquinaya.com"
          echo "   - https://sebastian.tumaquinaya.com"
          echo ""
          echo "📁 TEST ENDPOINTS (preserved):"
          echo "   - https://oliver.tumaquinaya.com/test"
          echo "   - https://hernando.tumaquinaya.com/test"
          echo "   - https://alan.tumaquinaya.com/test"
          echo "   - https://sebastian.tumaquinaya.com/test"
          echo ""
          echo "========================================="