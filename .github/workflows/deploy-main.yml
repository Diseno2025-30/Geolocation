name: Deploy Main to All Instances (Self-Hosted)

on:
  push:
    branches: [main]
    paths:
      - "Proyecto_1_Diseno/**"
      - ".github/workflows/deploy.yml"

jobs:
  deploy:
    name: Deploy to Instance ${{ matrix.instance }}

    strategy:
      fail-fast: false # Si un despliegue falla, los otros continuarán.
      matrix:
        # Define las 4 instancias en las que se desplegará en paralelo.
        instance: [1, 2, 3, 4]

    # Selecciona dinámicamente el runner correcto usando la etiqueta de la instancia.
    # Cada job buscará un runner con las 3 etiquetas, por ej: [self-hosted, EC2, instance-1]
    runs-on:
      - self-hosted
      - EC2
      - instance-${{ matrix.instance }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Production Instance
        # Usa el número de instancia de la matriz para seleccionar el .env correcto
        env:
          ENV_FILE: ${{ secrets[format('ENV_FILE_{0}', matrix.instance)] }}
          INSTANCE_NUM: ${{ matrix.instance }}

        run: |
          echo "🚀 Ejecutando despliegue de PRODUCCION en la instancia local (Runner) #${{ env.INSTANCE_NUM }}"

          # Crear el archivo .env a partir del secret
          echo "$ENV_FILE" > temp_env_file

          # Extraer el subdominio para usarlo en el script
          NAME_VALUE=$(grep "^NAME=" temp_env_file | cut -d'=' -f2 | tr -d '"' | tr -d "'" | tr '[:upper:]' '[:lower:]' | xargs)
          if [ -z "$NAME_VALUE" ]; then
            echo "❌ No se encontró la variable NAME en el archivo .env para la instancia ${{ env.INSTANCE_NUM }}"
            exit 1
          fi

          # Crear el script de despliegue que se ejecutará localmente en el runner
          cat > deploy_production.sh << 'DEPLOYEOF'
          #!/bin/bash
          set -e

          SUBDOMAIN="${1}"
          INSTANCE_NUM="${2}"
          DOMAIN_BASE="tumaquinaya.com"

          echo "🔧 (Runner Local) Configuración de despliegue PRODUCCION:"
          echo "   - Subdominio: ${SUBDOMAIN}"
          echo "   - Instancia: ${INSTANCE_NUM}"

          # El script asume que se ejecuta en el directorio base del runner
          # y que el repositorio se clona/actualiza en ese contexto.

          if [ -d "/home/ubuntu/Web-server-UDP" ]; then
            cd /home/ubuntu/Web-server-UDP
          else
            BASE_DIR="/opt/location-tracker"
            sudo mkdir -p ${BASE_DIR}
            sudo chown $USER:$USER ${BASE_DIR}
            cd ${BASE_DIR}
          fi

          echo "📦 Actualizando código desde Git..."
          if [ -d .git ]; then
            git fetch origin main
            git reset --hard origin/main
          else
            git clone https://github.com/Diseno2025-30/Geolocation.git .
          fi

          cd Proyecto_1_Diseno
          PROJECT_PATH=$(pwd)
          echo "🚀 Trabajando en: $PROJECT_PATH"

          APP_NAME="flask-app-${SUBDOMAIN}"
          FULL_DOMAIN="${SUBDOMAIN}.${DOMAIN_BASE}"

          # Mover el .env a su sitio
          mv ~/temp_env_file.env ./.env

          echo "   - APP_NAME: ${APP_NAME}"
          echo "   - FULL_DOMAIN: ${FULL_DOMAIN}"

          # --- El resto de tu lógica de instalación y configuración ---
          # (venv, pip, nginx, pm2, certbot, etc.)

          echo "🐍 Configurando entorno Python..."
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

          echo "🔄 Gestionando la aplicación con PM2..."
          pm2 reload ${APP_NAME} --update-env || pm2 start udp_flask_server.py --name ${APP_NAME}
          pm2 save

          echo "✅ Despliegue completado en ${FULL_DOMAIN}"
          DEPLOYEOF

          # Dar permisos y ejecutar el script creado
          chmod +x deploy_production.sh
          # Pasamos las variables al script que se ejecuta localmente
          ./deploy_production.sh "${NAME_VALUE}" "${{ env.INSTANCE_NUM }}"

          # Limpiar
          rm -f deploy_production.sh
