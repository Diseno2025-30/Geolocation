name: Deploy Main to Self-Hosted Runners

on:
  push:
    branches: [main]
    paths:
      - "Proyecto_1_Diseno/**"
      - ".github/workflows/deploy-main.yml"
      - "!**/test/**" # Ignora cambios en cualquier directorio 'test'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy main to ${{ matrix.name }}'s instance
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - instance: 1
            name: oliver
            runner_label: Oliver-branch
          - instance: 2
            name: hernando
            runner_label: Hernando-branch
          - instance: 3
            name: alan
            runner_label: Alan-branch
          - instance: 4
            name: sebastian
            runner_label: Sebastian-branch

    # CORRECCIÓN AQUÍ: Usamos fromJSON para construir la lista de etiquetas
    runs-on: ${{ fromJSON(format('["self-hosted", "EC2", "{0}"]', matrix.runner_label)) }}

    env:
      DOMAIN_BASE: tumaquinaya.com
      INSTANCE_NUM: ${{ matrix.instance }}
      PERSON_NAME: ${{ matrix.name }}
      ENV_FILE: ${{ secrets[format('ENV_FILE_{0}', matrix.instance)] }}

    steps:
      - name: 🎯 Checkout code from main branch
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: 📋 Display environment info
        run: |
          echo "🏃 Running on ${{ env.PERSON_NAME }}'s instance (Runner Label: ${{ matrix.runner_label }})"
          echo "🖥️ Hostname: $(hostname)"
          echo "👤 User: $(whoami)"

      - name: 🚀 Deploy Production Environment
        run: |
          echo "🚀 Iniciando despliegue de PRODUCCION para ${{ env.PERSON_NAME }}..."

          # Guardar .env temporalmente de forma segura
          TEMP_ENV_FILE=$(mktemp)
          echo "${{ env.ENV_FILE }}" > "${TEMP_ENV_FILE}"

          # Extraer NAME del .env para el subdominio
          NAME_VALUE=$(grep "^NAME=" "${TEMP_ENV_FILE}" | cut -d'=' -f2 | tr -d '"' | tr -d "'" | tr '[:upper:]' '[:lower:]' | xargs)
          if [ -z "$NAME_VALUE" ]; then
            NAME_VALUE="${{ env.PERSON_NAME }}"
          fi

          FULL_DOMAIN="${NAME_VALUE}.${{ env.DOMAIN_BASE }}"
          APP_NAME="flask-app-${NAME_VALUE}"

          echo "📋 Configuración:"
          echo "   - Persona: ${{ env.PERSON_NAME }}"
          echo "   - Instancia: ${{ env.INSTANCE_NUM }}"
          echo "   - Subdominio: ${NAME_VALUE}"
          echo "   - Dominio: ${FULL_DOMAIN}"
          echo "   - App PM2: ${APP_NAME}"

          # Crear script de despliegue
          cat > /tmp/deploy_prod_script.sh << 'DEPLOYEOF'
          #!/bin/bash
          set -e
          
          PROJECT_REPO_DIR=$1
          TEMP_ENV_FILE=$2
          APP_NAME=$3
          
          echo "🔧 (Runner Local) Iniciando script de despliegue..."
          
          if [ -d "/home/ubuntu/Web-server-UDP" ]; then
            PROJECT_BASE="/home/ubuntu/Web-server-UDP"
          else
            PROJECT_BASE="/opt/location-tracker"
            sudo mkdir -p $PROJECT_BASE
            sudo chown $USER:$USER $PROJECT_BASE
          fi
          
          PROJECT_PATH="${PROJECT_BASE}/Proyecto_1_Diseno"
          
          echo "📂 Ruta final del proyecto: ${PROJECT_PATH}"
          
          sudo rsync -a --delete --exclude='.git' --exclude='test/' "${PROJECT_REPO_DIR}/" "${PROJECT_PATH}/"
          
          sudo mv "${TEMP_ENV_FILE}" "${PROJECT_PATH}/.env"
          
          cd ${PROJECT_PATH}
          
          echo "🐍 Configurando entorno Python..."
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          source venv/bin/activate
          pip install --upgrade pip -q
          pip install flask psycopg2-binary python-dotenv -q
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt -q
          fi
          
          if [ ! -f "start_app.sh" ]; then
              cat > start_app.sh << 'STARTSCRIPT'
              #!/bin/bash
              SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
              cd "$SCRIPT_DIR"
              source venv/bin/activate
              export FLASK_APP=udp_flask_server.py
              export FLASK_ENV=production
              python udp_flask_server.py
              STARTSCRIPT
              chmod +x start_app.sh
          fi
          
          echo "🚀 Gestionando la aplicación con PM2..."
          if pm2 list | grep -q "${APP_NAME}"; then
            echo "🔄 Recargando la aplicación existente: ${APP_NAME}..."
            pm2 reload ${APP_NAME} --update-env
          else
            echo "🆕 Iniciando una nueva instancia de la aplicación: ${APP_NAME}..."
            sudo fuser -k 5000/tcp 2>/dev/null || true
            sleep 2
            pm2 start start_app.sh --name ${APP_NAME} --interpreter bash
          fi
          
          pm2 save
          sleep 3
          
          echo "✅ Despliegue completado."
          pm2 status ${APP_NAME}
          
          if [ -d "${PROJECT_PATH}/test" ]; then
            echo "✅ El directorio /test fue preservado correctamente."
          fi
          
          DEPLOYEOF
          
          chmod +x /tmp/deploy_prod_script.sh
          
          bash /tmp/deploy_prod_script.sh "$(pwd)/Proyecto_1_Diseno" "${TEMP_ENV_FILE}" "${APP_NAME}"
          
          rm /tmp/deploy_prod_script.sh