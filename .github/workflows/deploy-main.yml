name: Deploy Main to Self-Hosted Runners

on:
  push:
    branches: [main]
    paths:
      - "Proyecto_1_Diseno/**"
      - ".github/workflows/deploy-main.yml"
      - "!**/test/**"
  workflow_dispatch:

jobs:
  deploy-oliver:
    name: Deploy Main to Oliver
    runs-on: 
      - self-hosted
      - EC2
      - Oliver-branch  # ‚¨ÖÔ∏è MISMA ETIQUETA que tu ejemplo funcional
    
    steps:
    - name: Verify EC2 instance
      run: |
        echo "üîç Verificando instancia EC2..."
        INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id || echo "No disponible")
        HOSTNAME=$(hostname)
        echo "üìç Instance ID: $INSTANCE_ID"
        echo "üìç Hostname: $HOSTNAME"
        echo "‚úÖ Ejecutando en modo SELF-HOSTED (Oliver)"

    - name: Checkout main branch
      uses: actions/checkout@v3
      with:
        ref: main
        fetch-depth: 0

    - name: Deploy to Oliver's instance
      env:
        ENV_FILE: ${{ secrets.ENV_FILE_1 }}
        DOMAIN_BASE: tumaquinaya.com
        PERSON_NAME: "Oliver"
        INSTANCE_NUM: 1
      run: |
        echo "üöÄ SELF-HOSTED: Desplegando main en instancia Oliver"
        
        # Crear archivo .env directamente (COMO TU EJEMPLO)
        echo "$ENV_FILE" > /tmp/main_env_file
        
        # Extraer NAME del .env
        NAME_VALUE=$(grep "^NAME=" /tmp/main_env_file | cut -d'=' -f2 | tr -d '"' | tr -d "'" | xargs)
        NAME_LOWER=$(echo "$NAME_VALUE" | tr '[:upper:]' '[:lower:]')
        
        FULL_DOMAIN="${NAME_LOWER}.${DOMAIN_BASE}"
        
        echo "üìã Configuraci√≥n:"
        echo "   - Rama: main"
        echo "   - Persona: Oliver"
        echo "   - Instancia: 1"
        echo "   - Dominio: ${FULL_DOMAIN}"
        
        # SCRIPT DE DESPLIEGUE SIMPLIFICADO (como tu ejemplo pero para main)
        BASE_DIR="/opt/location-tracker"
        MAIN_DIR="${BASE_DIR}/Proyecto_1_Diseno"
        mkdir -p "${MAIN_DIR}"
        cd "${MAIN_DIR}"
        
        echo "üìÅ Directorio principal: ${MAIN_DIR}"
        
        # BACKUP DEL TEST (IMPORTANTE)
        if [ -d "test" ]; then
          echo "üíæ Respaldando directorio /test..."
          cp -r test /tmp/test_backup_oliver 2>/dev/null || true
        fi
        
        # ACTUALIZAR C√ìDIGO (COMO TU EJEMPLO)
        if [ -d .git ]; then
          echo "üì¶ Actualizando c√≥digo de main..."
          git fetch origin main
          git checkout main
          git reset --hard origin/main
        else
          echo "üì• Clonando repositorio..."
          cd /opt/location-tracker
          git clone -b main https://github.com/Diseno2025-30/Geolocation.git .
        fi
        
        cd "${MAIN_DIR}"
        
        # RESTAURAR TEST
        if [ -d "/tmp/test_backup_oliver" ]; then
          echo "üîÑ Restaurando directorio /test..."
          rm -rf test 2>/dev/null || true
          mv /tmp/test_backup_oliver test
          echo "‚úÖ Directorio /test preservado"
        fi
        
        # CONFIGURAR .env
        if [ -f "/tmp/main_env_file" ]; then
          cp "/tmp/main_env_file" .env
        fi
        
        # CONFIGURAR APLICACI√ìN (SIMILAR A TU EJEMPLO)
        APP_NAME="flask-app-${NAME_LOWER}"
        
        echo "üîß Configurando aplicaci√≥n..."
        
        # Configurar Python environment
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        
        source venv/bin/activate
        pip install --upgrade pip
        pip install flask psycopg2-binary python-dotenv
        
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        # Configurar PM2 (COMO TU EJEMPLO)
        pm2 stop ${APP_NAME} 2>/dev/null || true
        pm2 delete ${APP_NAME} 2>/dev/null || true
        
        cat > start_app.sh << 'EOF'
        #!/bin/bash
        cd "$(dirname "${BASH_SOURCE[0]}")"
        source venv/bin/activate
        export FLASK_APP=udp_flask_server.py
        export FLASK_ENV=production
        export FLASK_TRUSTED_PROXIES="127.0.0.1"
        python udp_flask_server.py
        EOF
        chmod +x start_app.sh
        
        pm2 start start_app.sh --name ${APP_NAME} --interpreter bash
        pm2 save
        
        echo "‚úÖ Despliegue completado para Oliver"
        echo "üîó URL: https://${FULL_DOMAIN}"
        
        # Limpiar archivos temporales
        rm -f /tmp/main_env_file

  deploy-hernando:
    name: Deploy Main to Hernando
    runs-on: 
      - self-hosted
      - EC2
      - Hernando-branch  # ‚¨ÖÔ∏è ETIQUETA CORRECTA
    
    steps:
    - name: Verify EC2 instance
      run: |
        echo "üîç Verificando instancia EC2..."
        INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id || echo "No disponible")
        HOSTNAME=$(hostname)
        echo "üìç Instance ID: $INSTANCE_ID"
        echo "üìç Hostname: $HOSTNAME"
        echo "‚úÖ Ejecutando en modo SELF-HOSTED (Hernando)"

    - name: Checkout main branch
      uses: actions/checkout@v3
      with:
        ref: main
        fetch-depth: 0

    - name: Deploy to Hernando's instance
      env:
        ENV_FILE: ${{ secrets.ENV_FILE_2 }}
        DOMAIN_BASE: tumaquinaya.com
        PERSON_NAME: "Hernando"
        INSTANCE_NUM: 2
      run: |
        echo "üöÄ SELF-HOSTED: Desplegando main en instancia Hernando"
        
        # MISMA L√ìGICA QUE OLIVER PERO PARA HERNANDO
        echo "$ENV_FILE" > /tmp/main_env_file
        NAME_VALUE=$(grep "^NAME=" /tmp/main_env_file | cut -d'=' -f2 | tr -d '"' | tr -d "'" | xargs)
        NAME_LOWER=$(echo "$NAME_VALUE" | tr '[:upper:]' '[:lower:]')
        
        FULL_DOMAIN="${NAME_LOWER}.${DOMAIN_BASE}"
        
        echo "üìã Configuraci√≥n:"
        echo "   - Rama: main"
        echo "   - Persona: Hernando"
        echo "   - Instancia: 2"
        echo "   - Dominio: ${FULL_DOMAIN}"
        
        BASE_DIR="/opt/location-tracker"
        MAIN_DIR="${BASE_DIR}/Proyecto_1_Diseno"
        mkdir -p "${MAIN_DIR}"
        cd "${MAIN_DIR}"
        
        # Backup test
        if [ -d "test" ]; then
          echo "üíæ Respaldando directorio /test..."
          cp -r test /tmp/test_backup_hernando 2>/dev/null || true
        fi
        
        # Actualizar c√≥digo
        if [ -d .git ]; then
          echo "üì¶ Actualizando c√≥digo de main..."
          git fetch origin main
          git checkout main
          git reset --hard origin/main
        else
          echo "üì• Clonando repositorio..."
          cd /opt/location-tracker
          git clone -b main https://github.com/Diseno2025-30/Geolocation.git .
        fi
        
        cd "${MAIN_DIR}"
        
        # Restaurar test
        if [ -d "/tmp/test_backup_hernando" ]; then
          echo "üîÑ Restaurando directorio /test..."
          rm -rf test 2>/dev/null || true
          mv /tmp/test_backup_hernando test
          echo "‚úÖ Directorio /test preservado"
        fi
        
        # Configurar aplicaci√≥n
        if [ -f "/tmp/main_env_file" ]; then
          cp "/tmp/main_env_file" .env
        fi
        
        APP_NAME="flask-app-${NAME_LOWER}"
        
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        source venv/bin/activate
        pip install --upgrade pip
        pip install flask psycopg2-binary python-dotenv
        
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        pm2 stop ${APP_NAME} 2>/dev/null || true
        pm2 delete ${APP_NAME} 2>/dev/null || true
        
        cat > start_app.sh << 'EOF'
        #!/bin/bash
        cd "$(dirname "${BASH_SOURCE[0]}")"
        source venv/bin/activate
        export FLASK_APP=udp_flask_server.py
        export FLASK_ENV=production
        export FLASK_TRUSTED_PROXIES="127.0.0.1"
        python udp_flask_server.py
        EOF
        chmod +x start_app.sh
        
        pm2 start start_app.sh --name ${APP_NAME} --interpreter bash
        pm2 save
        
        echo "‚úÖ Despliegue completado para Hernando"
        echo "üîó URL: https://${FULL_DOMAIN}"
        
        # Limpiar archivos temporales
        rm -f /tmp/main_env_file

  deploy-alan:
    name: Deploy Main to Alan
    runs-on: 
      - self-hosted
      - EC2
      - Alan-branch  # ‚¨ÖÔ∏è ETIQUETA CORRECTA
    
    steps:
    - name: Verify EC2 instance
      run: |
        echo "üîç Verificando instancia EC2..."
        INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id || echo "No disponible")
        HOSTNAME=$(hostname)
        echo "üìç Instance ID: $INSTANCE_ID"
        echo "üìç Hostname: $HOSTNAME"
        echo "‚úÖ Ejecutando en modo SELF-HOSTED (Alan)"

    - name: Checkout main branch
      uses: actions/checkout@v3
      with:
        ref: main
        fetch-depth: 0

    - name: Deploy to Alan's instance
      env:
        ENV_FILE: ${{ secrets.ENV_FILE_3 }}
        DOMAIN_BASE: tumaquinaya.com
        PERSON_NAME: "Alan"
        INSTANCE_NUM: 3
      run: |
        echo "üöÄ SELF-HOSTED: Desplegando main en instancia Alan"
        
        echo "$ENV_FILE" > /tmp/main_env_file
        NAME_VALUE=$(grep "^NAME=" /tmp/main_env_file | cut -d'=' -f2 | tr -d '"' | tr -d "'" | xargs)
        NAME_LOWER=$(echo "$NAME_VALUE" | tr '[:upper:]' '[:lower:]')
        
        FULL_DOMAIN="${NAME_LOWER}.${DOMAIN_BASE}"
        
        echo "üìã Configuraci√≥n:"
        echo "   - Rama: main"
        echo "   - Persona: Alan"
        echo "   - Instancia: 3"
        echo "   - Dominio: ${FULL_DOMAIN}"
        
        BASE_DIR="/opt/location-tracker"
        MAIN_DIR="${BASE_DIR}/Proyecto_1_Diseno"
        mkdir -p "${MAIN_DIR}"
        cd "${MAIN_DIR}"
        
        # Backup test
        if [ -d "test" ]; then
          echo "üíæ Respaldando directorio /test..."
          cp -r test /tmp/test_backup_alan 2>/dev/null || true
        fi
        
        # Actualizar c√≥digo
        if [ -d .git ]; then
          echo "üì¶ Actualizando c√≥digo de main..."
          git fetch origin main
          git checkout main
          git reset --hard origin/main
        else
          echo "üì• Clonando repositorio..."
          cd /opt/location-tracker
          git clone -b main https://github.com/Diseno2025-30/Geolocation.git .
        fi
        
        cd "${MAIN_DIR}"
        
        # Restaurar test
        if [ -d "/tmp/test_backup_alan" ]; then
          echo "üîÑ Restaurando directorio /test..."
          rm -rf test 2>/dev/null || true
          mv /tmp/test_backup_alan test
          echo "‚úÖ Directorio /test preservado"
        fi
        
        # Configurar aplicaci√≥n
        if [ -f "/tmp/main_env_file" ]; then
          cp "/tmp/main_env_file" .env
        fi
        
        APP_NAME="flask-app-${NAME_LOWER}"
        
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        source venv/bin/activate
        pip install --upgrade pip
        pip install flask psycopg2-binary python-dotenv
        
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        pm2 stop ${APP_NAME} 2>/dev/null || true
        pm2 delete ${APP_NAME} 2>/dev/null || true
        
        cat > start_app.sh << 'EOF'
        #!/bin/bash
        cd "$(dirname "${BASH_SOURCE[0]}")"
        source venv/bin/activate
        export FLASK_APP=udp_flask_server.py
        export FLASK_ENV=production
        export FLASK_TRUSTED_PROXIES="127.0.0.1"
        python udp_flask_server.py
        EOF
        chmod +x start_app.sh
        
        pm2 start start_app.sh --name ${APP_NAME} --interpreter bash
        pm2 save
        
        echo "‚úÖ Despliegue completado para Alan"
        echo "üîó URL: https://${FULL_DOMAIN}"
        
        # Limpiar archivos temporales
        rm -f /tmp/main_env_file

  deploy-sebastian:
    name: Deploy Main to Sebastian
    runs-on: 
      - self-hosted
      - EC2
      - Sebastian-branch  # ‚¨ÖÔ∏è ETIQUETA CORRECTA
    
    steps:
    - name: Verify EC2 instance
      run: |
        echo "üîç Verificando instancia EC2..."
        INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id || echo "No disponible")
        HOSTNAME=$(hostname)
        echo "üìç Instance ID: $INSTANCE_ID"
        echo "üìç Hostname: $HOSTNAME"
        echo "‚úÖ Ejecutando en modo SELF-HOSTED (Sebastian)"

    - name: Checkout main branch
      uses: actions/checkout@v3
      with:
        ref: main
        fetch-depth: 0

    - name: Deploy to Sebastian's instance
      env:
        ENV_FILE: ${{ secrets.ENV_FILE_4 }}
        DOMAIN_BASE: tumaquinaya.com
        PERSON_NAME: "Sebastian"
        INSTANCE_NUM: 4
      run: |
        echo "üöÄ SELF-HOSTED: Desplegando main en instancia Sebastian"
        
        echo "$ENV_FILE" > /tmp/main_env_file
        NAME_VALUE=$(grep "^NAME=" /tmp/main_env_file | cut -d'=' -f2 | tr -d '"' | tr -d "'" | xargs)
        NAME_LOWER=$(echo "$NAME_VALUE" | tr '[:upper:]' '[:lower:]')
        
        FULL_DOMAIN="${NAME_LOWER}.${DOMAIN_BASE}"
        
        echo "üìã Configuraci√≥n:"
        echo "   - Rama: main"
        echo "   - Persona: Sebastian"
        echo "   - Instancia: 4"
        echo "   - Dominio: ${FULL_DOMAIN}"
        
        BASE_DIR="/opt/location-tracker"
        MAIN_DIR="${BASE_DIR}/Proyecto_1_Diseno"
        mkdir -p "${MAIN_DIR}"
        cd "${MAIN_DIR}"
        
        # Backup test
        if [ -d "test" ]; then
          echo "üíæ Respaldando directorio /test..."
          cp -r test /tmp/test_backup_sebastian 2>/dev/null || true
        fi
        
        # Actualizar c√≥digo
        if [ -d .git ]; then
          echo "üì¶ Actualizando c√≥digo de main..."
          git fetch origin main
          git checkout main
          git reset --hard origin/main
        else
          echo "üì• Clonando repositorio..."
          cd /opt/location-tracker
          git clone -b main https://github.com/Diseno2025-30/Geolocation.git .
        fi
        
        cd "${MAIN_DIR}"
        
        # Restaurar test
        if [ -d "/tmp/test_backup_sebastian" ]; then
          echo "üîÑ Restaurando directorio /test..."
          rm -rf test 2>/dev/null || true
          mv /tmp/test_backup_sebastian test
          echo "‚úÖ Directorio /test preservado"
        fi
        
        # Configurar aplicaci√≥n
        if [ -f "/tmp/main_env_file" ]; then
          cp "/tmp/main_env_file" .env
        fi
        
        APP_NAME="flask-app-${NAME_LOWER}"
        
        if [ ! -d "venv" ]; then
          python3 -m venv venv
        fi
        source venv/bin/activate
        pip install --upgrade pip
        pip install flask psycopg2-binary python-dotenv
        
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        
        pm2 stop ${APP_NAME} 2>/dev/null || true
        pm2 delete ${APP_NAME} 2>/dev/null || true
        
        cat > start_app.sh << 'EOF'
        #!/bin/bash
        cd "$(dirname "${BASH_SOURCE[0]}")"
        source venv/bin/activate
        export FLASK_APP=udp_flask_server.py
        export FLASK_ENV=production
        export FLASK_TRUSTED_PROXIES="127.0.0.1"
        python udp_flask_server.py
        EOF
        chmod +x start_app.sh
        
        pm2 start start_app.sh --name ${APP_NAME} --interpreter bash
        pm2 save
        
        echo "‚úÖ Despliegue completado para Sebastian"
        echo "üîó URL: https://${FULL_DOMAIN}"
        
        # Limpiar archivos temporales
        rm -f /tmp/main_env_file

  summary:
    runs-on: ubuntu-latest
    needs: [deploy-oliver, deploy-hernando, deploy-alan, deploy-sebastian]
    if: always()
    steps:
      - name: üìä Deployment Summary
        run: |
          echo "========================================="
          echo "üéâ MAIN DEPLOYMENT SUMMARY"
          echo "========================================="
          echo ""
          echo "üìä STATUS:"
          echo "   Oliver: ${{ needs.deploy-oliver.result }}"
          echo "   Hernando: ${{ needs.deploy-hernando.result }}"
          echo "   Alan: ${{ needs.deploy-alan.result }}"
          echo "   Sebastian: ${{ needs.deploy-sebastian.result }}"
          echo ""
          echo "üîó PRODUCTION URLS:"
          echo "   - https://oliver.tumaquinaya.com"
          echo "   - https://hernando.tumaquinaya.com"
          echo "   - https://alan.tumaquinaya.com"
          echo "   - https://sebastian.tumaquinaya.com"
          echo ""
          echo "üìÅ TEST ENDPOINTS (preserved if they existed):"
          echo "   - https://oliver.tumaquinaya.com/test"
          echo "   - https://hernando.tumaquinaya.com/test"
          echo "   - https://alan.tumaquinaya.com/test"
          echo "   - https://sebastian.tumaquinaya.com/test"
          echo ""
          echo "üöÄ Deployment completed at: $(date)"
          echo "========================================="