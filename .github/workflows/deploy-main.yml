name: Deploy Main to All Instances (Self-Hosted)

on:
  push:
    branches: [main]
    paths:
      - "Proyecto_1_Diseno/**"
      - ".github/workflows/deploy-main.yml"
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Instance ${{ matrix.instance }}

    strategy:
      fail-fast: false
      matrix:
        instance: [1, 2, 3, 4]
        include:
          - instance: 1
            branch: Oliver-branch
            person: Oliver
          - instance: 2
            branch: Hernando-branch
            person: Hernando
          - instance: 3
            branch: Alan-branch
            person: Alan
          - instance: 4
            branch: Sebastian-branch
            person: Sebastian

    runs-on:
      - self-hosted
      - EC2
      - ${{ matrix.branch }}

    steps:
      - name: Verify EC2 instance
        run: |
          echo "🔍 Verificando instancia EC2..."
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id || echo "No disponible")
          HOSTNAME=$(hostname)
          echo "📍 Instance ID: $INSTANCE_ID"
          echo "📍 Hostname: $HOSTNAME"
          echo "📍 Person: ${{ matrix.person }}"
          echo "✅ Ejecutando en modo SELF-HOSTED (local)"

      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Deploy to Production Instance
        env:
          ENV_FILE: ${{ secrets[format('ENV_FILE_{0}', matrix.instance)] }}
          INSTANCE_NUM: ${{ matrix.instance }}
          PERSON_NAME: ${{ matrix.person }}
          DOMAIN_BASE: tumaquinaya.com
        run: |
          echo "🚀 SELF-HOSTED: Desplegando rama main a producción"
          echo "   - Instancia: ${INSTANCE_NUM}"
          echo "   - Persona: ${PERSON_NAME}"

          # Crear archivo .env temporal
          echo "$ENV_FILE" > /tmp/prod_env_file

          # Extraer NAME del .env
          NAME_VALUE=$(grep "^NAME=" /tmp/prod_env_file | cut -d'=' -f2 | tr -d '"' | tr -d "'" | xargs)
          NAME_LOWER=$(echo "$NAME_VALUE" | tr '[:upper:]' '[:lower:]')
          PERSON_LOWER=$(echo "$PERSON_NAME" | tr '[:upper:]' '[:lower:]')

          if [ "${NAME_LOWER}" != "${PERSON_LOWER}" ]; then
              echo "⚠️ ADVERTENCIA: El NAME en .env (${NAME_VALUE}) no coincide con ${PERSON_NAME}"
          fi

          FULL_DOMAIN="${NAME_LOWER}.${DOMAIN_BASE}"

          echo "📋 Configuración:"
          echo "   - Rama: main (producción)"
          echo "   - Persona: ${PERSON_NAME}"
          echo "   - Instancia: ${INSTANCE_NUM}"
          echo "   - Dominio: ${FULL_DOMAIN}"
          echo "   - Modo: SELF-HOSTED (local)"

          # Crear script de despliegue local
          cat > /tmp/deploy_prod_local.sh << 'DEPLOYEOF'
          #!/bin/bash
          set -e

          SUBDOMAIN="${1}"
          DOMAIN_BASE="${2}"
          INSTANCE_NUM="${3}"
          PERSON_NAME="${4}"

          echo "🔧 Configuración de despliegue PRODUCCIÓN (SELF-HOSTED):"
          echo "   - Rama: main"
          echo "   - Persona: ${PERSON_NAME}"
          echo "   - Subdominio: ${SUBDOMAIN}"
          echo "   - Dominio: ${SUBDOMAIN}.${DOMAIN_BASE}"
          echo "   - Instancia: ${INSTANCE_NUM}"

          # Determinar el directorio base
          if [ -d "/home/ubuntu/Web-server-UDP" ]; then
            echo "📁 Usando directorio legacy: /home/ubuntu/Web-server-UDP"
            cd /home/ubuntu/Web-server-UDP
            PROJECT_PATH="/home/ubuntu/Web-server-UDP/Proyecto_1_Diseno"
          else
            echo "📁 Usando directorio estándar: /opt/location-tracker"
            sudo mkdir -p /opt/location-tracker
            sudo chown $USER:$USER /opt/location-tracker
            cd /opt/location-tracker
            PROJECT_PATH="/opt/location-tracker/Proyecto_1_Diseno"
          fi

          # Guardar commit actual antes de actualizar
          echo "📦 Actualizando código desde Git..."
          if [ -d .git ]; then
            BEFORE_PULL=$(git rev-parse HEAD 2>/dev/null || echo "none")
            git fetch origin main
            git checkout main
            git reset --hard origin/main
            AFTER_PULL=$(git rev-parse HEAD)
            
            if [ "$BEFORE_PULL" != "$AFTER_PULL" ]; then
              echo "✅ Código actualizado exitosamente"
              echo "Cambios aplicados:"
              if [ "$BEFORE_PULL" != "none" ]; then
                git log --oneline ${BEFORE_PULL}..${AFTER_PULL} | head -10
              fi
              CODE_UPDATED=true
            else
              echo "ℹ️ Ya tienes la última versión del código"
              CODE_UPDATED=false
            fi
          else
            echo "📥 Clonando repositorio por primera vez..."
            git clone -b main https://github.com/Diseno2025-30/Geolocation.git .
            CODE_UPDATED=true
          fi

          cd Proyecto_1_Diseno
          PROJECT_PATH=$(pwd)

          # Copiar el archivo .env desde temporal
          if [ -f /tmp/prod_env_file ]; then
            cp /tmp/prod_env_file .env
            echo "✅ Archivo .env copiado"
          else
            echo "❌ No se encontró el archivo .env temporal"
            exit 1
          fi

          # Agregar información adicional al .env
          echo "" >> .env
          echo "# Configuración de producción" >> .env
          echo "PRODUCTION_MODE=true" >> .env
          echo "BRANCH_NAME=main" >> .env
          echo "PERSON_NAME=${PERSON_NAME}" >> .env
          echo "DEPLOYMENT_TIME=$(date -Iseconds)" >> .env

          FULL_DOMAIN="${SUBDOMAIN}.${DOMAIN_BASE}"
          APP_NAME="flask-app-${SUBDOMAIN}"
          PROD_PORT=5000

          echo "📊 Configuración de aplicación:"
          echo "   - APP_NAME: ${APP_NAME}"
          echo "   - Puerto: ${PROD_PORT}"
          echo "   - Proyecto: ${PROJECT_PATH}"

          # Instalar dependencias del sistema
          echo "📦 Verificando dependencias del sistema..."

          # Node.js y npm
          if ! command -v node &> /dev/null; then
            echo "Instalando Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi

          # PM2
          if ! command -v pm2 &> /dev/null; then
            echo "Instalando PM2..."
            sudo npm install -g pm2
            pm2 startup systemd -u ubuntu --hp /home/ubuntu
          fi

          # Python, Nginx y Certbot
          sudo apt-get update -qq
          sudo apt-get install -y python3-pip python3-venv nginx certbot python3-certbot-nginx

          # Configurar entorno virtual de Python
          echo "🐍 Configurando entorno Python..."
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi

          source venv/bin/activate
          pip install --upgrade pip
          pip install flask psycopg2-binary python-dotenv

          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

          # IMPORTANTE: Limpiar aplicaciones PM2 antiguas que puedan estar en conflicto
          echo "🧹 Limpiando aplicaciones PM2 antiguas..."

          # Detener aplicaciones Flask antiguas
          pm2 list | grep -E "flask-app-[0-9]+" | awk '{print $2}' | while read old_app; do
            if [ "$old_app" != "$APP_NAME" ]; then
              echo "Deteniendo aplicación antigua: $old_app"
              pm2 stop "$old_app" 2>/dev/null || true
              pm2 delete "$old_app" 2>/dev/null || true
            fi
          done

          # Detener la aplicación actual si existe
          pm2 stop ${APP_NAME} 2>/dev/null || true
          pm2 delete ${APP_NAME} 2>/dev/null || true

          # Matar cualquier proceso que esté usando el puerto 5000
          echo "🔍 Verificando puerto 5000..."
          if sudo lsof -i :5000 &>/dev/null; then
            echo "⚠️ Puerto 5000 en uso, liberándolo..."
            sudo fuser -k 5000/tcp 2>/dev/null || true
            sleep 2
          fi

          # Crear script de inicio si no existe o si hay cambios
          if [ ! -f "start_app.sh" ] || [ "$CODE_UPDATED" = "true" ]; then
            echo "📝 Actualizando script de inicio..."
            cat > start_app.sh << 'STARTSCRIPT'
          #!/bin/bash
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          cd "$SCRIPT_DIR"
          source venv/bin/activate
          export FLASK_APP=udp_flask_server.py
          export FLASK_ENV=production
          export FLASK_TRUSTED_PROXIES="127.0.0.1"
          python udp_flask_server.py
          STARTSCRIPT
            chmod +x start_app.sh
          fi

          # CONFIGURAR NGINX - ACTUALIZAR SOLO RUTAS DE PRODUCCIÓN
          echo "🌐 Configurando Nginx (preservando rutas de /test)..."
          NGINX_CONF="/etc/nginx/sites-available/location-tracker"

          # ESTRATEGIA: Reconstruir el archivo de forma limpia
          echo "📋 Reconstruyendo configuración de Nginx..."

          # 1. Preservar rutas de test si existen
          TEST_ROUTES=""
          if [ -f ${NGINX_CONF} ] && sudo grep -q "# ===== INICIO RUTAS TEST" ${NGINX_CONF}; then
            echo "✅ Preservando rutas de /test existentes..."
            TEST_ROUTES=$(sudo sed -n '/# ===== INICIO RUTAS TEST/,/# ===== FIN RUTAS TEST/p' ${NGINX_CONF})
          fi

          # 2. Crear configuración base nueva con solo producción
          cat > /tmp/nginx_new.conf << NGINXCONF
          server {
              listen 80;
              server_name ${FULL_DOMAIN} www.${FULL_DOMAIN};
              
              client_max_body_size 10M;
              
              # Location para validación de Let's Encrypt
              location /.well-known/acme-challenge/ {
                  root /var/www/certbot;
              }
              
              # ===== INICIO RUTAS PRODUCCION =====
              # Rama: main - Persona: ${PERSON_NAME}
              # Actualizado: $(date)
              
              location / {
                  proxy_pass http://localhost:${PROD_PORT};
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
                  proxy_buffering off;
                  
                  # Websocket support
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
              }
              
              location /static/ {
                  alias ${PROJECT_PATH}/static/;
                  expires 30d;
                  add_header Cache-Control "public, immutable";
              }
              
              # Endpoints específicos de producción
              location ~ ^/(coordenadas|database|version|health)$ {
                  proxy_pass http://localhost:${PROD_PORT}/\$1;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              
              # ===== FIN RUTAS PRODUCCION =====
          NGINXCONF

          # 3. Agregar rutas de test si existen
          if [ ! -z "$TEST_ROUTES" ]; then
            echo "" >> /tmp/nginx_new.conf
            echo "$TEST_ROUTES" >> /tmp/nginx_new.conf
          fi

          # 4. Cerrar el bloque server
          echo "}" >> /tmp/nginx_new.conf

          # 5. Hacer backup del archivo actual si existe
          if [ -f ${NGINX_CONF} ]; then
            sudo cp ${NGINX_CONF} ${NGINX_CONF}.backup.$(date +%Y%m%d_%H%M%S)
            echo "📋 Backup creado de la configuración anterior"
          fi

          # 6. Aplicar la nueva configuración
          sudo mv /tmp/nginx_new.conf ${NGINX_CONF}

          # Crear directorio para Let's Encrypt
          sudo mkdir -p /var/www/certbot

          # Habilitar el sitio
          sudo ln -sf ${NGINX_CONF} /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default

          # Verificar y recargar Nginx
          if sudo nginx -t; then
            sudo systemctl reload nginx
            echo "✅ Nginx configurado correctamente (rutas de producción actualizadas)"
          else
            echo "❌ Error en configuración de Nginx"
            sudo nginx -t
            exit 1
          fi

          # Obtener certificado SSL con Let's Encrypt
          echo "🔐 Verificando certificado SSL..."

          if sudo test -f "/etc/letsencrypt/live/${FULL_DOMAIN}/fullchain.pem"; then
            echo "📜 Certificado SSL existente encontrado, renovando si es necesario..."
            sudo certbot renew --nginx --non-interactive --quiet || true
          else
            echo "🆕 Obteniendo nuevo certificado SSL..."
            sudo certbot certonly \
              --webroot \
              -w /var/www/certbot \
              --non-interactive \
              --agree-tos \
              --email admin@${DOMAIN_BASE} \
              -d ${FULL_DOMAIN} \
              || echo "⚠️ No se pudo obtener certificado SSL"
          fi

          # Si tenemos certificado SSL, actualizar Nginx para HTTPS
          if sudo test -f "/etc/letsencrypt/live/${FULL_DOMAIN}/fullchain.pem"; then
            echo "🔒 Configurando HTTPS..."
            
            # Solo actualizar para HTTPS si no está ya configurado
            if ! sudo grep -q "listen 443 ssl" ${NGINX_CONF}; then
              echo "📝 Agregando configuración HTTPS..."
              
              # Aquí deberías agregar la configuración HTTPS
              # Por brevedad, solo muestro el concepto
              sudo certbot --nginx -d ${FULL_DOMAIN} --non-interactive --redirect || true
            fi
          fi

          # Configurar renovación automática de certificados
          CRON_JOB="0 0,12 * * * root certbot renew --nginx --quiet && systemctl reload nginx"
          if ! sudo grep -q "certbot renew" /etc/crontab; then
            echo "$CRON_JOB" | sudo tee -a /etc/crontab > /dev/null
            echo "✅ Renovación automática de SSL configurada"
          fi

          # Gestionar la aplicación con PM2
          echo "🚀 Iniciando aplicación con PM2..."

          if [ "$CODE_UPDATED" = "true" ] && pm2 list | grep -q "${APP_NAME}"; then
            echo "🔄 Código actualizado, recargando aplicación ${APP_NAME}..."
            pm2 reload ${APP_NAME} --update-env
          else
            echo "🆕 Iniciando aplicación ${APP_NAME}..."
            pm2 start start_app.sh \
              --name ${APP_NAME} \
              --interpreter bash \
              --cwd ${PROJECT_PATH} \
              --log-date-format "YYYY-MM-DD HH:mm:ss" \
              --max-memory-restart 500M \
              --max-restarts 3 \
              --restart-delay 3000
          fi

          pm2 save

          # Esperar y verificar
          echo "⏳ Esperando a que la aplicación esté lista..."
          sleep 5

          # Verificación de estado
          echo "📊 Estado de la aplicación:"
          pm2 status ${APP_NAME}

          # Tests de conectividad
          echo "🧪 Realizando pruebas de conectividad..."

          MAX_RETRIES=5
          RETRY=0
          while [ $RETRY -lt $MAX_RETRIES ]; do
            if curl -s -f http://localhost:${PROD_PORT}/ > /dev/null 2>&1; then
              echo "✅ Flask respondiendo correctamente en puerto ${PROD_PORT}"
              break
            else
              RETRY=$((RETRY + 1))
              if [ $RETRY -lt $MAX_RETRIES ]; then
                echo "⏳ Esperando a Flask (intento $RETRY/$MAX_RETRIES)..."
                sleep 2
              else
                echo "⚠️ Flask no responde después de $MAX_RETRIES intentos"
                pm2 logs ${APP_NAME} --lines 20 --nostream
              fi
            fi
          done

          # Verificar endpoints
          echo "🔍 Verificando endpoints de producción..."
          for endpoint in health version; do
            if curl -s -f http://localhost:${PROD_PORT}/${endpoint} > /dev/null 2>&1; then
              echo "   ✅ /${endpoint} respondiendo"
            else
              echo "   ⚠️ /${endpoint} no responde"
            fi
          done

          # Verificar que las rutas de test siguen funcionando si existen
          if pm2 list | grep -q "flask-test-"; then
            echo "🔍 Verificando que /test sigue funcionando..."
            if curl -s -f http://localhost/test/ > /dev/null 2>&1; then
              echo "   ✅ /test sigue respondiendo correctamente"
            else
              echo "   ⚠️ /test no responde (puede requerir redeploy de test)"
            fi
          fi

          # Configurar firewall
          if command -v ufw &> /dev/null; then
            echo "🔒 Configurando firewall..."
            sudo ufw allow 80/tcp comment "HTTP" 2>/dev/null || true
            sudo ufw allow 443/tcp comment "HTTPS" 2>/dev/null || true
            sudo ufw allow 5049/udp comment "UDP Listener" 2>/dev/null || true
            sudo ufw allow 22/tcp comment "SSH" 2>/dev/null || true
          fi

          echo ""
          echo "========================================="
          if [ "$CODE_UPDATED" = "true" ]; then
            echo "🎉 CÓDIGO ACTUALIZADO Y DESPLEGADO"
          else
            echo "✅ DESPLIEGUE VERIFICADO"
          fi
          echo "========================================="
          echo ""
          echo "📊 INFORMACIÓN DE PRODUCCIÓN:"
          echo "   - Persona: ${PERSON_NAME}"
          echo "   - Rama: main"
          echo "   - Instancia EC2: ${INSTANCE_NUM}"
          echo "   - Aplicación PM2: ${APP_NAME}"
          echo "   - Puerto: ${PROD_PORT}"
          echo "   - Proyecto: ${PROJECT_PATH}"
          echo ""
          echo "🔗 URLS DE PRODUCCIÓN:"
          if sudo test -f "/etc/letsencrypt/live/${FULL_DOMAIN}/fullchain.pem"; then
            echo "   - https://${FULL_DOMAIN} (SEGURO)"
            echo "   - http://${FULL_DOMAIN} → Redirige a HTTPS"
          else
            echo "   - http://${FULL_DOMAIN} (⚠️ Sin SSL)"
          fi
          echo ""
          echo "📍 ENDPOINTS DE PRODUCCIÓN:"
          echo "   - ${FULL_DOMAIN}/coordenadas"
          echo "   - ${FULL_DOMAIN}/database"
          echo "   - ${FULL_DOMAIN}/version"
          echo "   - ${FULL_DOMAIN}/health"
          echo ""

          # Mostrar info de test si existe
          if pm2 list | grep -q "flask-test-"; then
            echo "📍 RUTAS DE TEST (preservadas):"
            echo "   - ${FULL_DOMAIN}/test"
            echo "   - ${FULL_DOMAIN}/test/coordenadas"
            echo "   - ${FULL_DOMAIN}/test/database"
            echo ""
          fi

          echo "🛠️ COMANDOS ÚTILES:"
          echo "   - Ver logs prod: pm2 logs ${APP_NAME}"
          echo "   - Reiniciar prod: pm2 restart ${APP_NAME}"
          echo "   - Recargar prod: pm2 reload ${APP_NAME}"

          if pm2 list | grep -q "flask-test-"; then
            echo "   - Ver logs test: pm2 logs flask-test-${SUBDOMAIN}"
            echo "   - Reiniciar test: pm2 restart flask-test-${SUBDOMAIN}"
          fi

          echo "   - Monitorear todo: pm2 monit"
          echo "   - Estado general: pm2 status"
          echo "========================================="
          DEPLOYEOF

          chmod +x /tmp/deploy_prod_local.sh

          # Ejecutar localmente (sin SSH)
          /tmp/deploy_prod_local.sh "${NAME_LOWER}" "${DOMAIN_BASE}" "${INSTANCE_NUM}" "${PERSON_NAME}"

          # Limpiar archivos temporales
          rm -f /tmp/deploy_prod_local.sh /tmp/prod_env_file

          echo "✅ Despliegue SELF-HOSTED de PRODUCCIÓN completado para ${PERSON_NAME}"
          echo "ℹ️ Las rutas de /test han sido preservadas si existían"
